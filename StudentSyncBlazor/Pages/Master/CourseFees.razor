@page "/master/coursefee/index"
@using StudentSyncBlazor.Data.Models
@using StudentSyncBlazor.Core.Services.Interface
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using StudentSyncBlazor.Data.ResponseModel
@inject IJSRuntime JSRuntime
@inject ICourseFeeService CourseFeeService

<Breadcrumb Title="CourseFee" BreadcrumbPageTitle="Courses"></Breadcrumb>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <!-- Search Box and Add Button -->
                <div class="mb-3 d-flex justify-content-between align-items-center">
                    <button type="button" class="btn btn-primary mb-3" @onclick="OpenAddCourseFeeModal">+</button>
                    <input type="text" class="form-control" style="width: 13%;" placeholder="Search..." @bind="SearchQuery" @oninput="SearchCourseFees" />
                </div>
                <table id="CourseFeeTable" class="table table-bordered dt-responsive nowrap" style="width: 100%;">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Total Fees</th>
                            <th>Down Payment</th>
                            <th>No of Installments</th>
                            <th>Installment Amount</th>
                            <th>Remarks</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var courseFee in paginatedCourseFees)
                        {
                            <tr>
                                <td>@courseFee.Id</td>
                                <td>@courseFee.TotalFees</td>
                                <td>@courseFee.DownPayment</td>
                                <td>@courseFee.NoofInstallment</td>
                                <td>@courseFee.InstallmentAmount</td>
                                <td>@courseFee.Remarks</td>
                                <td>
                                    <button class="btn btn-warning btn-sm" @onclick="() => OpenEditCourseFeeModal(courseFee.Id)">Edit</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => OpenDeleteConfirmationModal(courseFee.Id)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <!-- Pagination Controls -->
                <div class="pagination-container d-flex justify-content-between align-items-center mb-3">
                    <!-- Pagination Message -->
                    <div class="pagination-message">
                        Showing @StartEntry to @EndEntry of @TotalEntries entries
                    </div>

                    <div class="pagination-controls d-flex align-items-center">
                        <button class="btn btn-secondary me-2" @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
                        <button class="btn btn-primary me-2" disabled>@CurrentPage</button>
                        <button class="btn btn-secondary me-2" @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
                    </div>
                </div>
              
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Course Fee Modal -->
<div class="modal fade" id="addEditCourseFeeModal" tabindex="-1" aria-labelledby="addEditCourseFeeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addEditCourseFeeModalLabel">@Title</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAddEditCourseFeeModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="courseFee" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="TotalFees">Total Fees</label>
                        <InputNumber id="TotalFees" class="form-control" @bind-Value="courseFee.TotalFees" />
                        <ValidationMessage For="@(() => courseFee.TotalFees)" />

                    </div>
                    <div class="form-group">
                        <label for="DownPayment">Down Payment</label>
                        <InputNumber id="DownPayment" class="form-control" @bind-Value="courseFee.DownPayment" />
                        <ValidationMessage For="@(() => courseFee.DownPayment)" />

                    </div>
                    <div class="form-group">
                        <label for="NoofInstallment">Number of Installments</label>
                        <InputNumber id="NoofInstallment" class="form-control" @bind-Value="courseFee.NoofInstallment" />
                        <ValidationMessage For="@(() => courseFee.NoofInstallment)" />

                    </div>
                    <div class="form-group">
                        <label for="InstallmentAmount">Installment Amount</label>
                        <InputNumber id="InstallmentAmount" class="form-control" @bind-Value="courseFee.InstallmentAmount" />
                        <ValidationMessage For="@(() => courseFee.InstallmentAmount)" />

                    </div>
                    <div class="form-group">
                        <label for="Remarks">Remarks</label>
                        <InputTextArea id="Remarks" class="form-control" @bind-Value="courseFee.Remarks" />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseAddEditCourseFeeModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Delete Confirmation</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDeleteConfirmationModal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this course fee?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmationModal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteCourseFee">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string SearchQuery { get; set; } = string.Empty;

    private List<CourseFeeResponseModel> courseFees = new List<CourseFeeResponseModel>();
    private List<CourseFeeResponseModel> paginatedCourseFees = new List<CourseFeeResponseModel>();
    private Data.Models.CourseFee courseFee = new Data.Models.CourseFee();
    private bool isEditing = false;
    private int courseFeeToDeleteId;

    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private int TotalPages { get; set; }
    private bool HasPreviousPage => CurrentPage > 1;
    private bool HasNextPage => CurrentPage < TotalPages;
    private int TotalEntries { get; set; }

    private int StartEntry => (CurrentPage - 1) * PageSize + 1;
    private int EndEntry => Math.Min(CurrentPage * PageSize, TotalEntries);

    private string Title => isEditing ? "Edit Course Fee" : "Add Course Fee";

    protected override async Task OnInitializedAsync()
    {
        await LoadCourseFees();
    }

    private async Task LoadCourseFees()
    {
        try
        {
            var allCourseFees = await CourseFeeService.GetAllCourseFeesAsync();
            if (allCourseFees == null || !allCourseFees.Any())
            {
                Console.WriteLine("No data returned from service.");
                courseFees = new List<CourseFeeResponseModel>();
            }
            else
            {
                Console.WriteLine($"Data loaded: {allCourseFees.Count} items.");
                courseFees = allCourseFees;
                FilterCourseFees();
                TotalEntries = courseFees.Count;

                TotalPages = (int)Math.Ceiling(courseFees.Count / (double)PageSize);
                paginatedCourseFees = courseFees.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
            }
            StateHasChanged(); // Force UI to update
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private void FilterCourseFees()
    {
        var filteredCourseFees = string.IsNullOrWhiteSpace(SearchQuery)
            ? courseFees
            : courseFees.Where(cf => cf.TotalFees.ToString().Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                                      cf.DownPayment.ToString().Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                                      cf.NoofInstallment.ToString().Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                                      cf.InstallmentAmount.ToString().Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                                      cf.Remarks.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)).ToList();

        TotalEntries = filteredCourseFees.Count;
        TotalPages = (int)Math.Ceiling(TotalEntries / (double)PageSize);
        paginatedCourseFees = filteredCourseFees.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
    }
    private async Task SearchCourseFees(ChangeEventArgs e)
    {
        SearchQuery = e.Value?.ToString() ?? string.Empty;
        FilterCourseFees();
    }
    
    private async Task PreviousPage()
    {
        if (HasPreviousPage)
        {
            CurrentPage--;
            await LoadCourseFees();
        }
    }

    private async Task NextPage()
    {
        if (HasNextPage)
        {
            CurrentPage++;
            await LoadCourseFees();
        }
    }

    private void OpenAddCourseFeeModal()
    {
        courseFee = new Data.Models.CourseFee();
        isEditing = false;
        ShowModal("addEditCourseFeeModal");
    }

    private async Task OpenEditCourseFeeModal(int courseFeeId)
    {
        isEditing = true;
        courseFee = await CourseFeeService.GetCourseFeeByIdAsync(courseFeeId);
        ShowModal("addEditCourseFeeModal");
    }

    private async Task OpenDeleteConfirmationModal(int courseFeeId)
    {
        courseFeeToDeleteId = courseFeeId;
        ShowModal("deleteConfirmationModal");
    }

    private async Task CloseAddEditCourseFeeModal()
    {
        await HideModal("addEditCourseFeeModal");
    }

    private async Task CloseDeleteConfirmationModal()
    {
        await HideModal("deleteConfirmationModal");
    }

    private async Task ConfirmDeleteCourseFee()
    {
        await CourseFeeService.DeleteCourseFeeAsync(courseFeeToDeleteId);
        await JSRuntime.InvokeVoidAsync("toastr.success", "Coursefee Deleted successfully");
        await LoadCourseFees();
        await CloseDeleteConfirmationModal();
    }

    private async Task HandleValidSubmit()
    {
        if (isEditing)
        {
            await CourseFeeService.UpdateCourseFeeAsync(courseFee);
            await JSRuntime.InvokeVoidAsync("toastr.success", "Coursefee Updated successfully");

        }
        else
        {
            await CourseFeeService.AddCourseFeeAsync(courseFee);
            await JSRuntime.InvokeVoidAsync("toastr.success", "Coursefee Added successfully");

        }
        await LoadCourseFees();
        await CloseAddEditCourseFeeModal();
    }

    private async Task ShowModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("showModal", modalId);
    }

    private async Task HideModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("hideModal", modalId);
    }
}
