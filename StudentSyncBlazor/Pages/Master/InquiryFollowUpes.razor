@page "/master/inquiryfollowup/index"
@using StudentSyncBlazor.Data.Models
@using StudentSyncBlazor.Core.Services.Interface
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient

<Breadcrumb Title="Inquiry Follow-Up" BreadcrumbPageTitle="Inquiries"></Breadcrumb>


<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <!-- Search Box and Add Button -->
                <div class="mb-3 d-flex justify-content-between align-items-center">
                    <button type="button" class="btn btn-primary mb-3" @onclick="OpenAddInquiryFollowUpModal">+</button>
                    <input type="text" class="form-control mb-3" style="width: 13%;" @bind="SearchQuery" @oninput="SearchInquiryFollowUps" placeholder="Search..." />
                </div>
                <table id="InquiryFollowUpTable" class="table table-bordered dt-responsive nowrap" style="width: 100%;">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Inquiry Date</th>
                            <th>Inquiry No</th>
                            <th>Through</th>
                            <th>Remarks</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var followUp in paginatedFollowUps)
                        {
                            <tr>
                                <td>@followUp.Id</td>
                                <td>@followUp.InquiryDate?.ToString("MM/dd/yyyy")</td>
                                <td>@followUp.InquiryNo</td>
                                <td>@followUp.Through</td>
                                <td>@followUp.Remarks</td>
                                <td>
                                    <button class="btn btn-warning btn-sm" @onclick="() => OpenEditInquiryFollowUpModal(followUp.Id)">Edit</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => OpenDeleteConfirmationModal(followUp.Id)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <!-- Pagination Controls -->
                <div class="pagination-container d-flex justify-content-between align-items-center mb-3">
                    <div class="pagination-message">
                        Showing @StartEntry to @EndEntry of @TotalEntries entries
                    </div>

                    <div class="pagination-controls d-flex align-items-center">
                        <button class="btn btn-secondary me-2" @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
                        <button class="btn btn-primary me-2" disabled>@CurrentPage</button>
                        <button class="btn btn-secondary me-2" @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit InquiryFollowUp Modal -->
<div class="modal fade" id="addEditInquiryFollowUpModal" tabindex="-1" aria-labelledby="addEditInquiryFollowUpModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addEditInquiryFollowUpModalLabel">@Title</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAddEditInquiryFollowUpModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="followUp" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="InquiryDate">Inquiry Date</label>
                        <InputDate id="InquiryDate" class="form-control" @bind-Value="followUp.InquiryDate" />
                        <ValidationMessage For="@(() => followUp.InquiryDate)" />

                    </div>
                    <div class="form-group">
                        <label for="InquiryNo">Inquiry No</label>
                        <InputNumber id="InquiryNo" class="form-control" @bind-Value="followUp.InquiryNo" />
                        <ValidationMessage For="@(() => followUp.InquiryNo)" />

                    </div>
                    <div class="form-group">
                        <label for="Through">Through</label>
                        <InputText id="Through" class="form-control" @bind-Value="followUp.Through" />
                        <ValidationMessage For="@(() => followUp.InquiryNo)" />

                    </div>
                    <div class="form-group">
                        <label for="Remarks">Remarks</label>
                        <InputTextArea id="Remarks" class="form-control" @bind-Value="followUp.Remarks" />
                        <ValidationMessage For="@(() => followUp.InquiryNo)" />

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseAddEditInquiryFollowUpModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Delete Confirmation</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDeleteConfirmationModal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this inquiry follow-up?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmationModal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteInquiryFollowUp">Delete</button>
            </div>
        </div>
    </div>
</div>
@code {
    private IList<InquiryFollowUp> followUps = new List<InquiryFollowUp>();
    private IList<InquiryFollowUp> paginatedFollowUps = new List<InquiryFollowUp>();
    private InquiryFollowUp followUp = new InquiryFollowUp();
    private bool isEditing = false;
    private int followUpToDeleteId;
    private string SearchQuery { get; set; } = string.Empty;
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private int TotalPages { get; set; }
    private bool HasPreviousPage => CurrentPage > 1;
    private bool HasNextPage => CurrentPage < TotalPages;

    private int StartEntry => (CurrentPage - 1) * PageSize + 1;
    private int EndEntry => Math.Min(CurrentPage * PageSize, TotalEntries);
    private int TotalEntries { get; set; }

    private string Title => isEditing ? "Edit Inquiry Follow-Up" : "Add Inquiry Follow-Up";

    protected override async Task OnInitializedAsync()
    {
        await LoadFollowUps();
    }

    private async Task LoadFollowUps()
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await HttpClient.GetAsync("InquiryFollowUp/GetAll");
            if (response.IsSuccessStatusCode)
            {
                followUps = await response.Content.ReadFromJsonAsync<List<InquiryFollowUp>>();
                TotalEntries = followUps.Count;
                TotalPages = (int)Math.Ceiling(TotalEntries / (double)PageSize);
                FilterFollowUps();
            }
            else
            {
                Console.WriteLine($"Error loading data: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private void FilterFollowUps()
    {
        var filteredFollowUps = string.IsNullOrEmpty(SearchQuery)
            ? followUps
            : followUps.Where(f => f.Remarks.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)).ToList();

        TotalEntries = filteredFollowUps.Count;
        TotalPages = (int)Math.Ceiling(TotalEntries / (double)PageSize);
        paginatedFollowUps = filteredFollowUps.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
    }

    private void SearchInquiryFollowUps(ChangeEventArgs e)
    {
        SearchQuery = e.Value?.ToString() ?? string.Empty;
        FilterFollowUps();
    }

    private async Task PreviousPage()
    {
        if (HasPreviousPage)
        {
            CurrentPage--;
            await LoadFollowUps();
        }
    }

    private async Task NextPage()
    {
        if (HasNextPage)
        {
            CurrentPage++;
            await LoadFollowUps();
        }
    }

    private async Task GoToPage(int pageNumber)
    {
        if (pageNumber >= 1 && pageNumber <= TotalPages)
        {
            CurrentPage = pageNumber;
            await LoadFollowUps();
        }
    }

    private void OpenAddInquiryFollowUpModal()
    {
        followUp = new InquiryFollowUp();
        isEditing = false;
        ShowModal("addEditInquiryFollowUpModal");
    }

    private async Task OpenEditInquiryFollowUpModal(int followUpId)
    {
        isEditing = true;
        var token = await AuthService.GetTokenAsync();
        HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var response = await HttpClient.GetAsync($"InquiryFollowUp/Edit/{followUpId}");
        if (response.IsSuccessStatusCode)
        {
            followUp = await response.Content.ReadFromJsonAsync<InquiryFollowUp>();
            ShowModal("addEditInquiryFollowUpModal");
        }
        else
        {
            await ShowErrorToast($"Error fetching follow-up: {response.ReasonPhrase}");
        }
    }

    private void OpenDeleteConfirmationModal(int followUpId)
    {
        followUpToDeleteId = followUpId;
        ShowModal("deleteConfirmationModal");
    }

    private void CloseAddEditInquiryFollowUpModal()
    {
        HideModal("addEditInquiryFollowUpModal");
    }

    private void CloseDeleteConfirmationModal()
    {
        HideModal("deleteConfirmationModal");
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            HttpResponseMessage response;
            if (isEditing)
            {
                response = await HttpClient.PutAsJsonAsync("InquiryFollowUp/Update", followUp);
                await ShowSuccessToast("Inquiry Follow-Up updated successfully.");
            }
            else
            {
                response = await HttpClient.PostAsJsonAsync("InquiryFollowUp/Create", followUp);
                await ShowSuccessToast("Inquiry Follow-Up added successfully.");
            }

            if (response.IsSuccessStatusCode)
            {
                await LoadFollowUps();
            }
            else
            {
                await ShowErrorToast($"Error saving follow-up: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            await ShowErrorToast($"Error saving follow-up: {ex.Message}");
        }
        finally
        {
            CloseAddEditInquiryFollowUpModal();
        }
    }

    private async Task ConfirmDeleteInquiryFollowUp()
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await HttpClient.DeleteAsync($"InquiryFollowUp/Delete/{followUpToDeleteId}");
            if (response.IsSuccessStatusCode)
            {
                await ShowSuccessToast("Inquiry Follow-Up deleted successfully.");
                await LoadFollowUps();
            }
            else
            {
                await ShowErrorToast($"Error deleting follow-up: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            await ShowErrorToast($"Error deleting follow-up: {ex.Message}");
        }
        finally
        {
            CloseDeleteConfirmationModal();
        }
    }

    private async Task ShowModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("eval", $"$('#{modalId}').modal('show');");
    }

    private async Task HideModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("eval", $"$('#{modalId}').modal('hide');");
    }

    private async Task ShowSuccessToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("toastr.success", message);
    }

    private async Task ShowErrorToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("toastr.error", message);
    }

    private async Task ShowInfoToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("toastr.info", message);
    }

    private async Task ShowWarningToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("toastr.warning", message);
    }
}
@* @code {
    private IList<InquiryFollowUp> followUps = new List<InquiryFollowUp>(); 
    private IList<InquiryFollowUp> paginatedFollowUps = new List<InquiryFollowUp>();
    private InquiryFollowUp followUp = new InquiryFollowUp();
    private bool isEditing = false;
    private int followUpToDeleteId;
    private string SearchQuery { get; set; } = string.Empty;
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private int TotalPages { get; set; }
    private bool HasPreviousPage => CurrentPage > 1;
    private bool HasNextPage => CurrentPage < TotalPages;

    private int StartEntry => (CurrentPage - 1) * PageSize + 1;
    private int EndEntry => Math.Min(CurrentPage * PageSize, TotalEntries);
    private int TotalEntries { get; set; }

    private string Title => isEditing ? "Edit Inquiry Follow-Up" : "Add Inquiry Follow-Up";

    protected override async Task OnInitializedAsync()
    {
        await LoadFollowUps();
    }

    
        private async Task LoadFollowUps()
        {
            try
            {
                followUps = (await InquiryFollowUpService.GetAllInquiryFollowUpsAsync()).ToList();
                TotalEntries = followUps.Count;
                TotalPages = (int)Math.Ceiling(TotalEntries / (double)PageSize);
                FilterFollowUps();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading data: {ex.Message}");
            }
        }
    
    private void FilterFollowUps()
    {
        var filteredFollowUps = string.IsNullOrEmpty(SearchQuery)
            ? followUps
            : followUps.Where(f => f.Remarks.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)).ToList();

        TotalEntries = filteredFollowUps.Count;
        TotalPages = (int)Math.Ceiling(TotalEntries / (double)PageSize);
        paginatedFollowUps = filteredFollowUps.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
    }

    private void SearchInquiryFollowUps(ChangeEventArgs e)
    {
        SearchQuery = e.Value.ToString();
        FilterFollowUps();
    }
    private void PreviousPage()
    {
        if (HasPreviousPage)
        {
            CurrentPage--;
            FilterFollowUps();
        }
    }

    private void NextPage()
    {
        if (HasNextPage)
        {
            CurrentPage++;
            FilterFollowUps();
        }
    }
    private void OpenAddInquiryFollowUpModal()
    {
        followUp = new InquiryFollowUp();
        isEditing = false;
        ShowModal("addEditInquiryFollowUpModal");
    }

    private async Task OpenEditInquiryFollowUpModal(int followUpId)
    {
        isEditing = true;
        followUp = await InquiryFollowUpService.GetInquiryFollowUpByIdAsync(followUpId);
        ShowModal("addEditInquiryFollowUpModal");
    }

    private async Task OpenDeleteConfirmationModal(int followUpId)
    {
        followUpToDeleteId = followUpId;
        ShowModal("deleteConfirmationModal");
    }

    private async Task CloseAddEditInquiryFollowUpModal()
    {
        await HideModal("addEditInquiryFollowUpModal");
    }

    private async Task CloseDeleteConfirmationModal()
    {
        await HideModal("deleteConfirmationModal");
    }

    private async Task ConfirmDeleteInquiryFollowUp()
    {
        await InquiryFollowUpService.DeleteInquiryFollowUpAsync(followUpToDeleteId);
        await JSRuntime.InvokeVoidAsync("toastr.success", "InquiryFollowUp deleted successfully.");

        await LoadFollowUps();
        await CloseDeleteConfirmationModal();
    }

    private async Task HandleValidSubmit()
    {                                                                                                                                               
        if (isEditing)
        {
            await InquiryFollowUpService.UpdateInquiryFollowUpAsync(followUp);
            await JSRuntime.InvokeVoidAsync("toastr.success", "InquiryFollowUp updated successfully.");

        }
        else
        {
            await InquiryFollowUpService.AddInquiryFollowUpAsync(followUp);
            await JSRuntime.InvokeVoidAsync("toastr.success", "InquiryFollowUp added successfully.");
                
        }
        await LoadFollowUps();
        await CloseAddEditInquiryFollowUpModal();
    }

    private async Task ShowModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("showModal", modalId);
    }

    private async Task HideModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("hideModal", modalId);
    }
}
           *@  