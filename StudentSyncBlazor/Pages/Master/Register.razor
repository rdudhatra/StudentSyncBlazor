@page "/register"
@layout EmptyLayout

@using StudentSyncBlazor.Core.Services.Interface
@using StudentSyncBlazor.Data.ViewModels
@inject NavigationManager Navigation
@inject IAuthService AuthService



<PageTitle>Register</PageTitle>

<div class="authentication-bg">
    <div class="account-pages my-5 pt-sm-5">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <div class="text-center">
                        <a href="/" class="mb-5 d-block auth-logo">
                            <h2>Student Sync</h2>
                        </a>
                    </div>
                </div>
            </div>
            <div class="row align-items-center justify-content-center">
                <div class="col-md-8 col-lg-6 col-xl-5">
                    <div class="card">
                        <div class="card-body p-4">
                            <div class="text-center mt-2">
                                <h5 class="text-primary">Register Account</h5>
                                <p class="text-muted">Get your free StudentSync account now.</p>
                            </div>
                            <div class="p-2 mt-4">
                                <EditForm Model="registerModel" OnValidSubmit="HandleValidSubmit">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />

                                    @if (!string.IsNullOrEmpty(errorMessage))
                                    {
                                        <div class="alert alert-danger">
                                            @errorMessage
                                        </div>
                                    }

                                    <div class="mb-3">
                                        <label for="email" class="form-label">Email</label>
                                        <InputText id="email" class="form-control" @bind-Value="registerModel.Email" placeholder="Enter email" />
                                        <ValidationMessage For="@(() => registerModel.Email)" class="text-danger" />
                                    </div>

                                    <div class="mb-3">
                                        <label for="username" class="form-label">Username</label>
                                        <InputText id="username" class="form-control" @bind-Value="registerModel.Username" placeholder="Enter username" />
                                        <ValidationMessage For="@(() => registerModel.Username)" class="text-danger" />
                                    </div>

                                    <div class="mb-3">
                                        <label for="password" class="form-label">Password</label>
                                        <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" placeholder="Enter password" />
                                        <ValidationMessage For="@(() => registerModel.Password)" class="text-danger" />
                                    </div>

                                    <div class="mb-3">
                                        <label for="confirmPassword" class="form-label">Confirm Password</label>
                                        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" placeholder="Confirm password" />
                                        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="text-danger" />
                                    </div>

                                    <div class="form-check">
                                        <InputCheckbox id="terms" class="form-check-input" @bind-Value="termsAccepted" />
                                        <label class="form-check-label" for="terms">I accept <a href="javascript:void(0);" class="text-dark">Terms and Conditions</a></label>
                                    </div>

                                    <div class="mt-3 text-end">
                                        <button class="btn btn-primary w-sm waves-effect waves-light" type="submit" disabled="@(!termsAccepted)">Register</button>
                                    </div>

                                    <div class="mt-4 text-center">
                                        <p class="text-muted mb-0">Already have an account? <a href="/login" class="fw-medium text-primary">Login</a></p>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                    <div class="mt-5 text-center">
                        <p>© @DateTime.Now.Year Student Sync</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    private RegisterViewModel registerModel = new RegisterViewModel();
    private bool registerSuccess = false;
    private bool termsAccepted = false;
    private string errorMessage;

    private async Task HandleValidSubmit()
    {
        var result = await AuthService.RegisterAsync(registerModel);
        if (result.Succeeded)
        {
            registerSuccess = true;
            Navigation.NavigateTo("/login");
        }
        else
        {
            errorMessage = result.Messages.FirstOrDefault() ?? "Registration failed. Please try again.";

        }
    }
}

