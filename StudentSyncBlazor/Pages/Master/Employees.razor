@page "/master/employee/index"
@using StudentSyncBlazor.Data.Models
@using StudentSyncBlazor.Core.Services.Interface
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using StudentSyncBlazor.Data.ResponseModel
@inject IJSRuntime JSRuntime
@inject IEmployeeService EmployeeService

<h3>Employee</h3>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <button type="button" class="btn btn-primary mb-3" @onclick="OpenAddEmployeeModal">+</button>
                <table id="EmployeeTable" class="table table-bordered dt-responsive nowrap" style="width: 100%;">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>First Name</th>
                            <th>Last Name</th>
                            <th>Gender</th>
                            <th>Date of Birth</th>
                            <th>Qualification</th>
                            <th>Designation</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var employee in employees)
                        {
                            <tr>
                                <td>@employee.Id</td>
                                <td>@employee.FirstName</td>
                                <td>@employee.LastName</td>
                                <td>@employee.Gender</td>
                                <td>@employee.DoB?.ToString("MM/dd/yyyy")</td>
                                <td>@employee.Qualification</td>
                                <td>@employee.Designation</td>
                                <td>
                                    <button class="btn btn-warning btn-sm" @onclick="() => OpenEditEmployeeModal(employee.Id)">Edit</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => OpenDeleteConfirmationModal(employee.Id)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Employee Modal -->
<div class="modal fade" id="addEditEmployeeModal" tabindex="-1" aria-labelledby="addEditEmployeeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addEditEmployeeModalLabel">@Title</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAddEditEmployeeModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="employee" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label for="FirstName">First Name</label>
                        <InputText id="FirstName" class="form-control" @bind-Value="employee.FirstName" />
                    </div>
                    <div class="form-group">
                        <label for="LastName">Last Name</label>
                        <InputText id="LastName" class="form-control" @bind-Value="employee.LastName" />
                    </div>
                    <div class="form-group">
                        <label for="Gender">Gender</label>
                        <InputText id="Gender" class="form-control" @bind-Value="employee.Gender" />
                    </div>
                    <div class="form-group">
                        <label for="DoB">Date of Birth</label>
                        <InputDate id="DoB" class="form-control" @bind-Value="employee.DoB" />
                    </div>
                    <div class="form-group">
                        <label for="Qualification">Qualification</label>
                        <InputText id="Qualification" class="form-control" @bind-Value="employee.Qualification" />
                    </div>
                    <div class="form-group">
                        <label for="Designation">Designation</label>
                        <InputText id="Designation" class="form-control" @bind-Value="employee.Designation" />
                    </div>
                
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseAddEditEmployeeModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Delete Confirmation</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDeleteConfirmationModal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this employee?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmationModal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteEmployee">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Employee> employees = new List<Employee>();
    private Data.Models.Employee employee = new Data.Models.Employee();
    private bool isEditing = false;
    private int employeeToDeleteId;

    private string Title => isEditing ? "Edit Employee" : "Add Employee";

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        try
        {
            employees = await EmployeeService.GetAllEmployeesAsync();
            if (employees == null || !employees.Any())
            {
                Console.WriteLine("No data returned from service.");
            }
            else
            {
                Console.WriteLine($"Data loaded: {employees.Count} items.");
            }
            StateHasChanged(); // Force UI to update
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private void OpenAddEmployeeModal()
    {
        employee = new Data.Models.Employee();
        isEditing = false;
        ShowModal("addEditEmployeeModal");
    }

    private async Task OpenEditEmployeeModal(int employeeId)
    {
        isEditing = true;
        employee = await EmployeeService.GetEmployeeByIdAsync(employeeId);
        ShowModal("addEditEmployeeModal");
    }

    private async Task OpenDeleteConfirmationModal(int employeeId)
    {
        employeeToDeleteId = employeeId;
        ShowModal("deleteConfirmationModal");
    }

    private async Task CloseAddEditEmployeeModal()
    {
        await HideModal("addEditEmployeeModal");
    }

    private async Task CloseDeleteConfirmationModal()
    {
        await HideModal("deleteConfirmationModal");
    }

    private async Task ConfirmDeleteEmployee()
    {
        await EmployeeService.DeleteEmployeeAsync(employeeToDeleteId);
        await LoadEmployees();
        await CloseDeleteConfirmationModal();
    }

    private async Task HandleValidSubmit()
    {
        if (isEditing)
        {
            await EmployeeService.UpdateEmployeeAsync(employee);
        }
        else
        {
            await EmployeeService.AddEmployeeAsync(employee);
        }
        await LoadEmployees();
        await CloseAddEditEmployeeModal();
    }

    private async Task ShowModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("showModal", modalId);
    }

    private async Task HideModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("hideModal", modalId);
    }
}



 @* @page "/master/employee/index"
@using StudentSyncBlazor.Data.Models
@using StudentSyncBlazor.Core.Services.Interface
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using StudentSyncBlazor.Data.ResponseModel
@inject IJSRuntime JSRuntime
@inject IEmployeeService EmployeeService


<Breadcrumb Title="Employee" BreadcrumbPageTitle="Master"></Breadcrumb>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <!-- Search Box and Add Button -->
                <div class="mb-3 d-flex justify-content-between align-items-center">
                    <button type="button" class="btn btn-primary ms-3" @onclick="OpenAddEmployeeModal">+</button>
                    <input type="text" class="form-control" style="width:13%;" placeholder="Search..." @bind="SearchQuery" @oninput="SearchEmployees" />
                </div>
                <table id="EmployeeTable" class="table table-bordered dt-responsive nowrap" style="width: 100%;">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>First Name</th>
                            <th>Last Name</th>
                            <th>Gender</th>
                            <th>Date of Birth</th>
                            <th>Qualification</th>
                            <th>Designation</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var employee in paginatedEmployees)
                        {
                            <tr>
                                <td>@employee.Id</td>
                                <td>@employee.FirstName</td>
                                <td>@employee.LastName</td>
                                <td>@employee.Gender</td>
                                <td>@employee.DoB?.ToString("MM/dd/yyyy")</td>
                                <td>@employee.Qualification</td>
                                <td>@employee.Designation</td>
                                <td>
                                    <button class="btn btn-warning btn-sm" @onclick="() => OpenEditEmployeeModal(employee.Id)">Edit</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => OpenDeleteConfirmationModal(employee.Id)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <!-- Pagination Controls -->
                <div class="pagination-container d-flex justify-content-between align-items-center mb-3">
                    <!-- Pagination Message -->
                    <div class="pagination-message">
                        Showing @StartEntry to @EndEntry of @TotalEntries entries
                    </div>

                    <div class="pagination-controls d-flex align-items-center">
                        <button class="btn btn-secondary  me-2" @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
                        <button class="btn btn-primary me-2" disabled>@CurrentPage</button>
                        <button class="btn btn-secondary me-2" @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
                    </div>
                </div>
             
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Employee Modal -->
<div class="modal fade" id="addEditEmployeeModal" tabindex="-1" aria-labelledby="addEditEmployeeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addEditEmployeeModalLabel">@Title</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAddEditEmployeeModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="employee" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="FirstName">First Name</label>
                        <InputText id="FirstName" class="form-control" @bind-Value="employee.FirstName" />
                        <ValidationMessage For="@(() => employee.FirstName)" />

                    </div>
                    <div class="form-group">
                        <label for="LastName">Last Name</label>
                        <InputText id="LastName" class="form-control" @bind-Value="employee.LastName" />
                        <ValidationMessage For="@(() => employee.LastName)" />

                    </div>
                    <div class="form-group">
                        <label for="Gender">Gender</label>
                        <InputText id="Gender" class="form-control" @bind-Value="employee.Gender" />
                        <ValidationMessage For="@(() => employee.Gender)" />

                    </div>
                    <div class="form-group">
                        <label for="DoB">Date of Birth</label>
                        <InputDate id="DoB" class="form-control" @bind-Value="employee.DoB" />
                        <ValidationMessage For="@(() => employee.DoB)" />

                    </div>
                    <div class="form-group">
                        <label for="Qualification">Qualification</label>
                        <InputText id="Qualification" class="form-control" @bind-Value="employee.Qualification" />
                        <ValidationMessage For="@(() => employee.Qualification)" />

                    </div>
                    <div class="form-group">
                        <label for="Designation">Designation</label>
                        <InputText id="Designation" class="form-control" @bind-Value="employee.Designation" />
                        <ValidationMessage For="@(() => employee.Designation)" />

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseAddEditEmployeeModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Delete Confirmation</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDeleteConfirmationModal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this employee?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmationModal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteEmployee">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Employee> employees = new List<Employee>();
    private List<Employee> paginatedEmployees = new List<Employee>();
    private Data.Models.Employee employee = new Data.Models.Employee();
    private bool isEditing = false;
    private int employeeToDeleteId;
    private string SearchQuery { get; set; } = string.Empty;

    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private int TotalPages { get; set; }
    private int TotalEntries { get; set; }
    private bool HasPreviousPage => CurrentPage > 1;
    private bool HasNextPage => CurrentPage < TotalPages;

    private int StartEntry => (CurrentPage - 1) * PageSize + 1;
    private int EndEntry => Math.Min(CurrentPage * PageSize, TotalEntries);

    private string Title => isEditing ? "Edit Employee" : "Add Employee";

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        try
        {
            var allEmployees = await EmployeeService.GetAllEmployeesAsync();
            if (allEmployees == null || !allEmployees.Any())
            {
                Console.WriteLine("No data returned from service.");
                employees = new List<Employee>();
            }
            else
            {
                Console.WriteLine($"Data loaded: {allEmployees.Count} items.");
                employees = allEmployees;
                FilterEmployees();
                TotalEntries = employees.Count;
                TotalPages = (int)Math.Ceiling(employees.Count / (double)PageSize);
                paginatedEmployees = employees.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
            }
            StateHasChanged(); // Force UI to update
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }
    private void FilterEmployees()
    {
        if (string.IsNullOrEmpty(SearchQuery))
        {
            // If no search query, use all employees
            TotalEntries = employees.Count;
            paginatedEmployees = employees.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
        }
        else
        {
            // Filter and paginate employees
            var filteredEmployees = employees.Where(e => e.FirstName.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                                                         e.LastName.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                                                         e.Gender.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                                                         e.Qualification.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                                                         e.Designation.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
            TotalEntries = filteredEmployees.Count;
            TotalPages = (int)Math.Ceiling(TotalEntries / (double)PageSize);
            paginatedEmployees = filteredEmployees.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
        }
    }
    private async Task SearchEmployees(ChangeEventArgs e )
    {
        SearchQuery = e.Value?.ToString() ?? string.Empty;
        FilterEmployees();
    }


    private async Task PreviousPage()
    {
        if (HasPreviousPage)
        {
            CurrentPage--;
            await LoadEmployees();
        }
    }

    private async Task NextPage()
    {
        if (HasNextPage)
        {
            CurrentPage++;
            await LoadEmployees();
        }
    }

    private void OpenAddEmployeeModal()
    {
        employee = new Data.Models.Employee();
        isEditing = false;
        ShowModal("addEditEmployeeModal");
    }

    private async Task OpenEditEmployeeModal(int employeeId)
    {
        isEditing = true;
        employee = await EmployeeService.GetEmployeeByIdAsync(employeeId);
        ShowModal("addEditEmployeeModal");
    }

    private async Task OpenDeleteConfirmationModal(int employeeId)
    {
        employeeToDeleteId = employeeId;
        ShowModal("deleteConfirmationModal");
    }

    private async Task CloseAddEditEmployeeModal()
    {
        await HideModal("addEditEmployeeModal");
    }

    private async Task CloseDeleteConfirmationModal()
    {
        await HideModal("deleteConfirmationModal");
    }

    private async Task ConfirmDeleteEmployee()
    {
        await EmployeeService.DeleteEmployeeAsync(employeeToDeleteId);
        await ShowSuccessToast("Employee Deleted successfully.");
        await LoadEmployees();
        await CloseDeleteConfirmationModal();
    }

    private async Task HandleValidSubmit()
    {
        if (isEditing)
        {
            await EmployeeService.UpdateEmployeeAsync(employee);
            await ShowSuccessToast("Employee updated successfully.");

        }
        else
        {
            await EmployeeService.AddEmployeeAsync(employee);
            await ShowSuccessToast("Employee Added successfully.");

        }
        await LoadEmployees();
        await CloseAddEditEmployeeModal();
    }

    private async Task ShowModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("showModal", modalId);
    }

    private async Task HideModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("hideModal", modalId);
    }

      private async Task ShowSuccessToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("showSuccess", message);
    }

    private async Task ShowErrorToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("showError", message);
    }

    private async Task ShowInfoToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("showInfo", message);
    }

    private async Task ShowWarningToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("showWarning", message);
    }
} *@
