@page "/master/coursesyllabus/index"
@using StudentSyncBlazor.Data.Models
@using StudentSyncBlazor.Core.Services.Interface
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using StudentSyncBlazor.Data.ResponseModel
@inject IJSRuntime JSRuntime
@inject ICourseSyllabusService CourseSyllabusService

<Breadcrumb Title="Course Syllabus" BreadcrumbPageTitle="Courses"></Breadcrumb>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <!-- Search Box and Add Button -->
                <div class="mb-3 d-flex justify-content-between align-items-center">
                    <button type="button" class="btn btn-primary ms-3" @onclick="OpenAddCourseSyllabusModal">+</button>
                    <input type="text" class="form-control" style="width: 13%;" placeholder="Search..." @bind="SearchQuery" @oninput="SearchCourseSyllabuses" />
                </div>
                <table id="CourseSyllabusTable" class="table table-bordered dt-responsive nowrap" style="width: 100%;">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Chapter Name</th>
                            <th>Topic Name</th>
                            <th>Remarks</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var syllabus in paginatedSyllabuses)
                        {
                            <tr>
                                <td>@syllabus.Id</td>
                                <td>@syllabus.ChapterName</td>
                                <td>@syllabus.TopicName</td>
                                <td>@syllabus.Remarks</td>
                                <td>
                                    <button class="btn btn-warning btn-sm" @onclick="() => OpenEditCourseSyllabusModal(syllabus.Id)">Edit</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => OpenDeleteConfirmationModal(syllabus.Id)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <!-- Pagination Controls -->
                <div class="pagination-container d-flex justify-content-between align-items-center mb-3">
                    <!-- Pagination Message -->
                    <div class="pagination-message">
                        Showing @StartEntry to @EndEntry of @TotalEntries entries
                    </div>

                    <div class="pagination-controls d-flex align-items-center">
                        <button class="btn btn-secondary me-2" @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
                        <button class="btn btn-primary me-2" disabled>@CurrentPage</button>
                        <button class="btn btn-secondary me-2" @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
                    </div>
                </div>
                
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Course Syllabus Modal -->
<div class="modal fade" id="addEditCourseSyllabusModal" tabindex="-1" aria-labelledby="addEditCourseSyllabusModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addEditCourseSyllabusModalLabel">@Title</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAddEditCourseSyllabusModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="courseSyllabus" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="ChapterName">Chapter Name</label>
                        <InputText id="ChapterName" class="form-control" @bind-Value="courseSyllabus.ChapterName" />
                        <ValidationMessage For="@(() => courseSyllabus.ChapterName)" />

                    </div>
                    <div class="form-group">
                        <label for="TopicName">Topic Name</label>
                        <InputText id="TopicName" class="form-control" @bind-Value="courseSyllabus.TopicName" />
                        <ValidationMessage For="@(() => courseSyllabus.TopicName)" />

                    </div>
                    <div class="form-group">
                        <label for="Remarks">Remarks</label>
                        <InputTextArea id="Remarks" class="form-control" @bind-Value="courseSyllabus.Remarks" />
                        <ValidationMessage For="@(() => courseSyllabus.Remarks)" />

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseAddEditCourseSyllabusModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Delete Confirmation</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDeleteConfirmationModal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this course syllabus?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmationModal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteCourseSyllabus">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string SearchQuery { get; set; } = string.Empty;

    private List<CourseSyllabusResponseModel> syllabuses = new List<CourseSyllabusResponseModel>();
    private List<CourseSyllabusResponseModel> paginatedSyllabuses = new List<CourseSyllabusResponseModel>();
    private CourseSyllabus courseSyllabus = new CourseSyllabus();
    private bool isEditing = false;
    private int syllabusToDeleteId;

    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private int TotalPages { get; set; }
    private bool HasPreviousPage => CurrentPage > 1;
    private bool HasNextPage => CurrentPage < TotalPages;


    private int StartEntry => (CurrentPage - 1) * PageSize + 1;
    private int EndEntry => Math.Min(CurrentPage * PageSize, TotalEntries); 
    private int TotalEntries { get; set; }

    private string Title => isEditing ? "Edit Course Syllabus" : "Add Course Syllabus";

    protected override async Task OnInitializedAsync()
    {
        await LoadCourseSyllabuses();
    }

    private async Task LoadCourseSyllabuses()
    {
        try
        {
            var allSyllabuses = await CourseSyllabusService.GetAllCourseSyllabusesAsync();
            if (allSyllabuses == null || !allSyllabuses.Any())
            {
                Console.WriteLine("No data returned from service.");
                syllabuses = new List<CourseSyllabusResponseModel>();
            }
            else
            {
                Console.WriteLine($"Data loaded: {allSyllabuses.Count} items.");
                syllabuses = allSyllabuses;
                TotalEntries = syllabuses.Count;
                FilterSyllabuses();
                TotalPages = (int)Math.Ceiling(syllabuses.Count / (double)PageSize);
                paginatedSyllabuses = syllabuses.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
            }
            StateHasChanged(); // Force UI to update
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }
    private void FilterSyllabuses()
    {
        var filteredSyllabuses = syllabuses
            .Where(s => string.IsNullOrEmpty(SearchQuery) ||
                        s.ChapterName.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                        s.TopicName.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                        s.Remarks.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();

        TotalEntries = filteredSyllabuses.Count;
        TotalPages = (int)Math.Ceiling(TotalEntries / (double)PageSize);
        paginatedSyllabuses = filteredSyllabuses.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
    }
    private async Task SearchCourseSyllabuses(ChangeEventArgs e)
    {
        SearchQuery = e.Value?.ToString() ?? string.Empty;
        FilterSyllabuses();
    }

    
    private async Task PreviousPage()
    {
        if (HasPreviousPage)
        {
            CurrentPage--;
            await LoadCourseSyllabuses();
        }
    }

    private async Task NextPage()
    {
        if (HasNextPage)
        {
            CurrentPage++;
            await LoadCourseSyllabuses();
        }
    }

    private void OpenAddCourseSyllabusModal()
    {
        courseSyllabus = new CourseSyllabus();
        isEditing = false;
        ShowModal("addEditCourseSyllabusModal");
    }

    private async Task OpenEditCourseSyllabusModal(int syllabusId)
    {
        try
        {
            var syllabus = await CourseSyllabusService.GetCourseSyllabusByIdAsync(syllabusId);
            if (syllabus == null)
            {
                // Handle the case where the syllabus is not found
                Console.WriteLine($"Course syllabus with ID {syllabusId} not found.");
                // Optionally, show a user-friendly message or notification
                await JSRuntime.InvokeVoidAsync("alert", "Course syllabus not found.");
                return;
            }

            courseSyllabus = syllabus;
            isEditing = true;
            ShowModal("addEditCourseSyllabusModal");
        }
        catch (Exception ex)
        {
            // Handle the exception and show an error message
            Console.WriteLine($"An error occurred: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while loading the course syllabus.");
        }
    }


    private async Task OpenDeleteConfirmationModal(int syllabusId)
    {
        syllabusToDeleteId = syllabusId;
        ShowModal("deleteConfirmationModal");
    }

    private async Task CloseAddEditCourseSyllabusModal()
    {
        await HideModal("addEditCourseSyllabusModal");
    }

    private async Task CloseDeleteConfirmationModal()
    {
        await HideModal("deleteConfirmationModal");
    }

    private async Task ConfirmDeleteCourseSyllabus()
    {
        await CourseSyllabusService.DeleteCourseSyllabusAsync(syllabusToDeleteId);
        await JSRuntime.InvokeVoidAsync("toastr.success", "CourseSyllabus Deleted successfully");

        await LoadCourseSyllabuses();
        await CloseDeleteConfirmationModal();
    }

    private async Task HandleValidSubmit()
    {
        if (isEditing)
        {
            await CourseSyllabusService.UpdateCourseSyllabusAsync(courseSyllabus);
            await JSRuntime.InvokeVoidAsync("toastr.success", "CourseSyllabus Updated successfully");

        }
        else
        {
            await CourseSyllabusService.AddCourseSyllabusAsync(courseSyllabus);
            await JSRuntime.InvokeVoidAsync("toastr.success", "CourseSyllabus Added successfully");

        }
        await LoadCourseSyllabuses();
        await CloseAddEditCourseSyllabusModal();
    }

    private async Task ShowModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("showModal", modalId);
    }

    private async Task HideModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("hideModal", modalId);
    }
}
