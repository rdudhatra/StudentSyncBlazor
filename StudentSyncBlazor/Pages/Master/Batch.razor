@* @page "/master/batch/index"
@using StudentSyncBlazor.Data.Models
@using StudentSyncBlazor.Core.Services.Interface
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using StudentSyncBlazor.Data.ResponseModel
@inject IJSRuntime JSRuntime
@inject IBatchService BatchService

<h3>Batch</h3>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <button type="button" class="btn btn-primary mb-3" @onclick="OpenAddBatchModal">+</button>
                <table id="BatchTable" class="table table-bordered dt-responsive nowrap" style="width: 100%;">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Batch Code</th>
                            <th>Batch Time</th>
                            <th>Faculty Name</th>
                            <th>Course Name</th>
                            <th>Is Active</th>
                            <th>Remarks</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var batch in batches)
                        {
                            <tr>
                                <td>@batch.Id</td>
                                <td>@batch.BatchCode</td>
                                <td>@batch.BatchTime</td>
                                <td>@batch.FacultyName</td>
                                <td>@batch.CourseName</td>
                                <td>@(batch.IsActive ? "Yes" : "No")</td>
                                <td>@batch.Remarks</td>
                                <td>
                                    <button class="btn btn-warning" @onclick="() => OpenEditBatchModal(batch.Id)">Edit</button>
                                    <button class="btn btn-danger" @onclick="() => OpenDeleteConfirmationModal(batch.Id)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Batch Modal -->
<div class="modal fade" id="addEditBatchModal" tabindex="-1" aria-labelledby="addEditBatchModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addEditBatchModalLabel">@Title</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAddEditBatchModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="batch" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label for="BatchCode">Batch Code</label>
                        <InputText id="BatchCode" class="form-control" @bind-Value="batch.BatchCode" />
                    </div>
                    <div class="form-group">
                        <label for="BatchTime">Batch Time</label>
                        <InputText id="BatchTime" class="form-control" @bind-Value="batch.BatchTime" />
                    </div>
                    <div class="form-group">
                        <label for="FacultyName">Faculty Name</label>
                        <InputText id="FacultyName" class="form-control" @bind-Value="batch.FacultyName" />
                    </div>
                    <div class="form-group">
                        <label for="BatchCourseId">Course Name</label>
                        <InputSelect id="BatchCourseId" @bind-Value="batch.BatchCourseId">
                            <!-- Populate options dynamically here -->
                        </InputSelect>
                    </div>
                    <div class="form-group">
                        <label for="IsActive">Is Active</label>
                        <InputCheckbox id="IsActive" @bind-Value="batch.IsActive" />
                    </div>
                    <div class="form-group">
                        <label for="Remarks">Remarks</label>
                        <InputTextArea id="Remarks" class="form-control" @bind-Value="batch.Remarks" />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseAddEditBatchModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Delete Confirmation</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDeleteConfirmationModal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this batch?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmationModal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteBatch">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<BatchResponseModel> batches = new List<BatchResponseModel>();
    private BatchResponseModel batch = new BatchResponseModel();
    private bool isEditing = false;
    private int batchToDeleteId;

    private string Title => isEditing ? "Edit Batch" : "Add Batch";

    protected override async Task OnInitializedAsync()
    {
        await LoadBatches();
    }

    private async Task LoadBatches()
    {
        batches = await BatchService.GetAllBatchesAsync();
    }

    private void OpenAddBatchModal()
    {
        batch = new BatchResponseModel();
        isEditing = false;
        ShowModal("addEditBatchModal");
    }

    private async Task OpenEditBatchModal(int batchId)
    {
        isEditing = true;
        // batch = await BatchService.GetBatchByIdAsync(batchId);
        ShowModal("addEditBatchModal");
    }

    private async Task OpenDeleteConfirmationModal(int batchId)
    {
        batchToDeleteId = batchId;
        ShowModal("deleteConfirmationModal");
    }

    private async Task CloseAddEditBatchModal()
    {
        await HideModal("addEditBatchModal");
    }

    private async Task CloseDeleteConfirmationModal()
    {
        await HideModal("deleteConfirmationModal");
    }

    private async Task ConfirmDeleteBatch()
    {
        await BatchService.DeleteBatchAsync(batchToDeleteId);
        await LoadBatches();
        await CloseDeleteConfirmationModal();
    }

    private async Task HandleValidSubmit()
    {
        if (isEditing)
        {
           // await BatchService.UpdateBatchAsync(batch);
        }
        else
        {
           // await BatchService.CreateBatchAsync(batch);
        }
        await LoadBatches();
        await CloseAddEditBatchModal();
    }

    private async Task ShowModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("showModal", modalId);
    }

    private async Task HideModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("hideModal", modalId);
    }
}
 *@