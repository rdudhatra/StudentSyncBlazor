    @* @page "/master/batch/index"
    @using StudentSyncBlazor.Data.Models
    @using StudentSyncBlazor.Core.Services.Interface
    @using Microsoft.AspNetCore.Components
    @using Microsoft.AspNetCore.Components.Forms
    @using StudentSyncBlazor.Data.ResponseModel
    @inject IJSRuntime JSRuntime
    @inject IBatchService BatchService

    <h3>Batch</h3>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <button type="button" class="btn btn-primary mb-3" @onclick="OpenAddBatchModal">+</button>
                    <table id="BatchTable" class="table table-bordered dt-responsive nowrap" style="width: 100%;">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Batch Code</th>
                                <th>Batch Time</th>
                                <th>Faculty Name</th>
                                <th>Remarks</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var batch in batches)
                            {
                                <tr>
                                    <td>@batch.Id</td>
                                    <td>@batch.BatchCode</td>
                                    <td>@batch.BatchTime</td>
                                    <td>@batch.FacultyName</td>
                                    <td>@batch.Remarks</td>
                                    <td>
                                        <button class="btn btn-warning" @onclick="() => OpenEditBatchModal(batch.Id)">Edit</button>
                                        <button class="btn btn-danger" @onclick="() => OpenDeleteConfirmationModal(batch.Id)">Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Add/Edit Batch Modal -->
    <div class="modal fade" id="addEditBatchModal" tabindex="-1" aria-labelledby="addEditBatchModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addEditBatchModalLabel">@Title</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAddEditBatchModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="batch" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label for="BatchCode">Batch Code</label>
                            <InputText id="BatchCode" class="form-control" @bind-Value="batch.BatchCode" />
                        </div>
                        <div class="form-group">
                            <label for="BatchTime">Batch Time</label>
                            <InputText id="BatchTime" class="form-control" @bind-Value="batch.BatchTime" />
                        </div>
                        <div class="form-group">
                            <label for="FacultyName">Faculty Name</label>
                            <InputText id="FacultyName" class="form-control" @bind-Value="batch.FacultyName" />
                        </div>
                        <div class="form-group">
                            <label for="Remarks">Remarks</label>
                            <InputTextArea id="Remarks" class="form-control" @bind-Value="batch.Remarks" />
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseAddEditBatchModal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteConfirmationModalLabel">Delete Confirmation</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDeleteConfirmationModal"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this batch?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmationModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteBatch">Delete</button>
                </div>
            </div>
        </div>
    </div>

    @code {
        private List<BatchResponseModel> batches = new List<BatchResponseModel>();
        private Data.Models.Batch batch = new Data.Models.Batch();
        private bool isEditing = false;
        private int batchToDeleteId;

        private string Title => isEditing ? "Edit Batch" : "Add Batch";

        protected override async Task OnInitializedAsync()
        {
            await LoadBatches();
        }

        private async Task LoadBatches()
        {
            try
            {
                batches = await BatchService.GetAllBatchesAsync();
                if (batches == null || !batches.Any())
                {
                    Console.WriteLine("No data returned from service.");
                }
                else
                {
                    Console.WriteLine($"Data loaded: {batches.Count} items.");
                }
                StateHasChanged(); // Force UI to update
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading data: {ex.Message}");
            }
        }


        private void OpenAddBatchModal()
        {
            batch = new Data.Models.Batch();
            isEditing = false;
            ShowModal("addEditBatchModal");
        }

        private async Task OpenEditBatchModal(int batchId)
        {
            isEditing = true;
             batch = await BatchService.GetBatchByIdAsync(batchId);
            ShowModal("addEditBatchModal");
        }

        private async Task OpenDeleteConfirmationModal(int batchId)
        {
            batchToDeleteId = batchId;
            ShowModal("deleteConfirmationModal");
        }

        private async Task CloseAddEditBatchModal()
        {
            await HideModal("addEditBatchModal");
        }

        private async Task CloseDeleteConfirmationModal()
        {
            await HideModal("deleteConfirmationModal");
        }

        private async Task ConfirmDeleteBatch()
        {
            await BatchService.DeleteBatchAsync(batchToDeleteId);
            await LoadBatches();
            await CloseDeleteConfirmationModal();
        }

        private async Task HandleValidSubmit()
        {
            if (isEditing)
            {
                 await BatchService.UpdateBatchAsync(batch);
            }
            else
            {
                await BatchService.CreateBatchAsync(batch);
            }
            await LoadBatches();
            await CloseAddEditBatchModal();
        }

        private async Task ShowModal(string modalId)
        {
            await JSRuntime.InvokeVoidAsync("showModal", modalId);
        }

        private async Task HideModal(string modalId)
        {
            await JSRuntime.InvokeVoidAsync("hideModal", modalId);
        }


    }


     *@



    @* @page "/master/batch/index"
    @using StudentSyncBlazor.Data.Models
    @using StudentSyncBlazor.Core.Services.Interface
    @using Microsoft.AspNetCore.Components
    @using Microsoft.AspNetCore.Components.Forms
    @using StudentSyncBlazor.Data.ResponseModel
    @inject IJSRuntime JSRuntime
    @inject IBatchService BatchService

    <h3>Batch</h3>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <button type="button" class="btn btn-primary mb-3" @onclick="OpenAddBatchModal">+</button>
                    <table id="BatchTable" class="table table-bordered dt-responsive nowrap" style="width: 100%;">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Batch Code</th>
                                <th>Batch Time</th>
                                <th>Faculty Name</th>
                                <th>Remarks</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var batch in paginatedBatches)
                            {
                                <tr>
                                    <td>@batch.Id</td>
                                    <td>@batch.BatchCode</td>
                                    <td>@batch.BatchTime</td>
                                    <td>@batch.FacultyName</td>
                                    <td>@batch.Remarks</td>
                                    <td>
                                        <button class="btn btn-warning" @onclick="() => OpenEditBatchModal(batch.Id)">Edit</button>
                                        <button class="btn btn-danger" @onclick="() => OpenDeleteConfirmationModal(batch.Id)">Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div class="pagination mt-3">
                        <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
                        <span>Page @CurrentPage of @TotalPages</span>
                        <button class="btn btn-secondary" @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add/Edit Batch Modal -->
    <div class="modal fade" id="addEditBatchModal" tabindex="-1" aria-labelledby="addEditBatchModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addEditBatchModalLabel">@Title</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAddEditBatchModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="batch" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label for="BatchCode">Batch Code</label>
                            <InputText id="BatchCode" class="form-control" @bind-Value="batch.BatchCode" />
                        </div>
                        <div class="form-group">
                            <label for="BatchTime">Batch Time</label>
                            <InputText id="BatchTime" class="form-control" @bind-Value="batch.BatchTime" />
                        </div>
                        <div class="form-group">
                            <label for="FacultyName">Faculty Name</label>
                            <InputText id="FacultyName" class="form-control" @bind-Value="batch.FacultyName" />
                        </div>
                        <div class="form-group">
                            <label for="Remarks">Remarks</label>
                            <InputTextArea id="Remarks" class="form-control" @bind-Value="batch.Remarks" />
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseAddEditBatchModal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteConfirmationModalLabel">Delete Confirmation</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDeleteConfirmationModal"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this batch?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmationModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteBatch">Delete</button>
                </div>
            </div>
        </div>
    </div>

    @code {
        private List<BatchResponseModel> batches = new List<BatchResponseModel>();
        private List<BatchResponseModel> paginatedBatches = new List<BatchResponseModel>();
        private Data.Models.Batch batch = new Data.Models.Batch();
        private bool isEditing = false;
        private int batchToDeleteId;

        private int CurrentPage { get; set; } = 1;
        private int PageSize { get; set; } = 10;
        private int TotalPages { get; set; }
        private bool HasPreviousPage => CurrentPage > 1;
        private bool HasNextPage => CurrentPage < TotalPages;

        private string Title => isEditing ? "Edit Batch" : "Add Batch";

        protected override async Task OnInitializedAsync()
        {
            await LoadBatches();
        }

        private async Task LoadBatches()
        {
            try
            {
                var allBatches = await BatchService.GetAllBatchesAsync();
                if (allBatches == null || !allBatches.Any())
                {
                    Console.WriteLine("No data returned from service.");
                    batches = new List<BatchResponseModel>();
                }
                else
                {
                    Console.WriteLine($"Data loaded: {allBatches.Count} items.");
                    batches = allBatches;
                    TotalPages = (int)Math.Ceiling(batches.Count / (double)PageSize);
                    paginatedBatches = batches.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
                }
                StateHasChanged(); // Force UI to update
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading data: {ex.Message}");
            }
        }

        private async Task PreviousPage()
        {
            if (HasPreviousPage)
            {
                CurrentPage--;
                await LoadBatches();
            }
        }

        private async Task NextPage()
        {
            if (HasNextPage)
            {
                CurrentPage++;
                await LoadBatches();
            }
        }

        private void OpenAddBatchModal()
        {
            batch = new Data.Models.Batch();
            isEditing = false;
            ShowModal("addEditBatchModal");
        }

        private async Task OpenEditBatchModal(int batchId)
        {
            isEditing = true;
            batch = await BatchService.GetBatchByIdAsync(batchId);
            ShowModal("addEditBatchModal");
        }

        private async Task OpenDeleteConfirmationModal(int batchId)
        {
            batchToDeleteId = batchId;
            ShowModal("deleteConfirmationModal");
        }

        private async Task CloseAddEditBatchModal()
        {
            await HideModal("addEditBatchModal");
        }

        private async Task CloseDeleteConfirmationModal()
        {
            await HideModal("deleteConfirmationModal");
        }

        private async Task ConfirmDeleteBatch()
        {
            await BatchService.DeleteBatchAsync(batchToDeleteId);
            await LoadBatches();
            await CloseDeleteConfirmationModal();
        }

        private async Task HandleValidSubmit()
        {
            if (isEditing)
            {
                await BatchService.UpdateBatchAsync(batch);
            }
            else
            {
                await BatchService.CreateBatchAsync(batch);
            }
            await LoadBatches();
            await CloseAddEditBatchModal();
        }

        private async Task ShowModal(string modalId)
        {
            await JSRuntime.InvokeVoidAsync("showModal", modalId);
        }

        private async Task HideModal(string modalId)
        {
            await JSRuntime.InvokeVoidAsync("hideModal", modalId);
        }
    }
     *@

 @*   @page "/master/batch/index"
@using StudentSyncBlazor.Data.Models
@using StudentSyncBlazor.Core.Services.Interface
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using StudentSyncBlazor.Data.ResponseModel
@inject IJSRuntime JSRuntime
@inject IBatchService BatchService

<link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

<h3>Batch</h3>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <button type="button" class="btn btn-primary mb-3" @onclick="OpenAddBatchModal">+</button>


                <table id="BatchTable" class="table table-bordered dt-responsive nowrap" style="width: 100%;">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Batch Code</th>
                            <th>Batch Time</th>
                            <th>Faculty Name</th>
                            <th>Remarks</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var batch in paginatedBatches)
                        {
                            <tr>
                                <td>@batch.Id</td>
                                <td>@batch.BatchCode</td>
                                <td>@batch.BatchTime</td>
                                <td>@batch.FacultyName</td>
                                <td>@batch.Remarks</td>
                                <td>
                                    <button class="btn btn-warning" @onclick="() => OpenEditBatchModal(batch.Id)">Edit</button>
                                    <button class="btn btn-danger" @onclick="() => OpenDeleteConfirmationModal(batch.Id)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <!-- Pagination Container -->
                <div class="pagination-container d-flex justify-content-between align-items-center mb-3">
                    <!-- Pagination Message -->
                    <div class="pagination-message">
                        Showing @StartEntry to @EndEntry of @TotalEntries entries
                    </div>

                    <!-- Pagination Controls -->
                    <div class="pagination-controls d-flex align-items-center">
                        <button class="btn btn-secondary me-2" @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
                        <button class="btn btn-primary me-2" disabled>@CurrentPage</button>
                        <button class="btn btn-secondary me-2" @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Batch Modal -->
<div class="modal fade" id="addEditBatchModal" tabindex="-1" aria-labelledby="addEditBatchModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addEditBatchModalLabel">@Title</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAddEditBatchModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="batch" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label for="BatchCode">Batch Code</label>
                        <InputText id="BatchCode" class="form-control" @bind-Value="batch.BatchCode" />
                    </div>
                    <div class="form-group">
                        <label for="BatchTime">Batch Time</label>
                        <InputText id="BatchTime" class="form-control" @bind-Value="batch.BatchTime" />
                    </div>
                    <div class="form-group">
                        <label for="FacultyName">Faculty Name</label>
                        <InputText id="FacultyName" class="form-control" @bind-Value="batch.FacultyName" />
                    </div>
                    <div class="form-group">
                        <label for="Remarks">Remarks</label>
                        <InputTextArea id="Remarks" class="form-control" @bind-Value="batch.Remarks" />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseAddEditBatchModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Delete Confirmation</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDeleteConfirmationModal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this batch?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmationModal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteBatch">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    private async Task ShowSuccessToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("showSuccess", message);
    }

    private async Task ShowErrorToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("showError", message);
    }

    private async Task ShowInfoToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("showInfo", message);
    }

    private async Task ShowWarningToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("showWarning", message);
    }

    private List<BatchResponseModel> batches = new List<BatchResponseModel>();
    private List<BatchResponseModel> paginatedBatches = new List<BatchResponseModel>();
    private Data.Models.Batch batch = new Data.Models.Batch();
    private bool isEditing = false;
    private int batchToDeleteId;

    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private int TotalEntries { get; set; }
    private int TotalPages { get; set; }
    private bool HasPreviousPage => CurrentPage > 1;
    private bool HasNextPage => CurrentPage < TotalPages;

    private int StartEntry => (CurrentPage - 1) * PageSize + 1;
    private int EndEntry => Math.Min(CurrentPage * PageSize, TotalEntries);

    private string Title => isEditing ? "Edit Batch" : "Add Batch";

    protected override async Task OnInitializedAsync()
    {
        await LoadBatches();
    }

    private async Task LoadBatches()
    {
        try
        {
            // Fetch all batches from the service
            var allBatches = await BatchService.GetAllBatchesAsync();
            if (allBatches == null || !allBatches.Any())
            {
                batches = new List<BatchResponseModel>();
            }
            else
            {
                batches = allBatches;
                TotalEntries = batches.Count; // Set total entries
                                              // Calculate the total number of pages
                TotalPages = (int)Math.Ceiling(TotalEntries / (double)PageSize);
                // Fetch the data for the current page
                paginatedBatches = batches.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
            }
            StateHasChanged(); // Force UI to update
        }
        catch (Exception ex)
        {
            // Handle any exceptions that occur
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task PreviousPage()
    {
        if (HasPreviousPage)
        {
            CurrentPage--;
            await LoadBatches();
        }
    }

    private async Task NextPage()
    {
        if (HasNextPage)
        {
            CurrentPage++;
            await LoadBatches();
        }
    }

    private async Task GoToPage(int pageNumber)
    {
        if (pageNumber >= 1 && pageNumber <= TotalPages)
        {
            CurrentPage = pageNumber;
            await LoadBatches();
        }
    }

    private void OpenAddBatchModal()
    {
        batch = new Data.Models.Batch();
        isEditing = false;
        ShowModal("addEditBatchModal");
    }

    private async Task OpenEditBatchModal(int batchId)
    {
        isEditing = true;
        batch = await BatchService.GetBatchByIdAsync(batchId);
        ShowModal("addEditBatchModal");
    }

    private void OpenDeleteConfirmationModal(int batchId)
    {
        batchToDeleteId = batchId;
        ShowModal("deleteConfirmationModal");
    }

    private void CloseAddEditBatchModal()
    {
        HideModal("addEditBatchModal");
    }

    private void CloseDeleteConfirmationModal()
    {
        HideModal("deleteConfirmationModal");
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (isEditing)
            {
                await BatchService.UpdateBatchAsync(batch);
                await ShowSuccessToast("Batch updated successfully.");
            }
            else
            {
                await BatchService.CreateBatchAsync(batch);
                await ShowSuccessToast("Batch added successfully.");
            }
            await LoadBatches();
        }
        catch (Exception ex)
        {
            await ShowErrorToast($"Error saving batch: {ex.Message}");
        }
        finally
        {
            CloseAddEditBatchModal();
        }
    }

    private async Task ConfirmDeleteBatch()
    {
        try
        {
            await BatchService.DeleteBatchAsync(batchToDeleteId);
            await ShowSuccessToast("Batch deleted successfully.");
            await LoadBatches();
        }
        catch (Exception ex)
        {
            await ShowErrorToast($"Error deleting batch: {ex.Message}");
        }
        finally
        {
            CloseDeleteConfirmationModal();
        }
    }

    private void ShowModal(string modalId)
    {
        JSRuntime.InvokeVoidAsync("eval", $"$('#{modalId}').modal('show');");
    }

    private void HideModal(string modalId)
    {
        JSRuntime.InvokeVoidAsync("eval", $"$('#{modalId}').modal('hide');");
    }
} *@

  @page "/master/batch/index"
@using StudentSyncBlazor.Data.Models
@using StudentSyncBlazor.Core.Services.Interface
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using StudentSyncBlazor.Data.ResponseModel
@inject HttpClient HttpClient

@inject IJSRuntime JSRuntime

<link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>


<Breadcrumb Title="Batch" BreadcrumbPageTitle="Master"></Breadcrumb>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <!-- Search Box and Add Button -->
                <div class="mb-3 d-flex justify-content-between align-items-center">
                    <button type="button" class="btn btn-primary ms-3" @onclick="OpenAddBatchModal">+</button>
                    <input type="text" class="form-control" style="width: 13%;" placeholder="Search..." @bind="SearchQuery" @oninput="SearchBatches" />
                </div>

                <table id="BatchTable" class="table table-bordered dt-responsive nowrap" style="width: 100%;">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Batch Code</th>
                            <th>Batch Time</th>
                            <th>Faculty Name</th>
                            <th>Remarks</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var batch in paginatedBatches)
                        {
                            <tr>
                                <td>@batch.Id</td>
                                <td>@batch.BatchCode</td>
                                <td>@batch.BatchTime</td>
                                <td>@batch.FacultyName</td>
                                <td>@batch.Remarks</td>
                                <td>
                                    <button class="btn btn-warning btn-sm" @onclick="() => OpenEditBatchModal(batch.Id)">Edit</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => OpenDeleteConfirmationModal(batch.Id)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <!-- Pagination Container -->
                <div class="pagination-container d-flex justify-content-between align-items-center mb-3">
                    <!-- Pagination Message -->
                    <div class="pagination-message">
                        Showing @StartEntry to @EndEntry of @TotalEntries entries
                    </div>

                    <!-- Pagination Controls -->
                    <div class="pagination-controls d-flex align-items-center">
                        <button class="btn btn-secondary me-2" @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
                        <button class="btn btn-primary me-2" disabled>@CurrentPage</button>
                        <button class="btn btn-secondary me-2" @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Batch Modal -->
<div class="modal fade" id="addEditBatchModal" tabindex="-1" aria-labelledby="addEditBatchModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addEditBatchModalLabel">@Title</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAddEditBatchModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="batch" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                     <div class="form-group">
                        <label for="BatchCode">Batch Code</label>
                        <InputText id="BatchCode" class="form-control" @bind-Value="batch.BatchCode" />
                        <ValidationMessage For="@(() => batch.BatchCode)" />
                    </div>  
                    <div class="form-group">
                        <label for="BatchTime">Batch Time</label>
                        <InputText id="BatchTime" class="form-control" @bind-Value="batch.BatchTime" />
                        <ValidationMessage For="@(() => batch.BatchTime)" />

                    </div>
                    <div class="form-group">
                        <label for="FacultyName">Faculty Name</label>
                        <InputText id="FacultyName" class="form-control" @bind-Value="batch.FacultyName" />
                        <ValidationMessage For="@(() => batch.FacultyName)" />

                    </div>
                    <div class="form-group">
                        <label for="Remarks">Remarks</label>
                        <InputTextArea id="Remarks" class="form-control" @bind-Value="batch.Remarks" />
                        <ValidationMessage For="@(() => batch.Remarks)" />

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseAddEditBatchModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Delete Confirmation</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDeleteConfirmationModal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this batch?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmationModal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteBatch">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string SearchQuery { get; set; } = string.Empty;
    private List<BatchResponseModel> batches = new List<BatchResponseModel>();
    private List<BatchResponseModel> paginatedBatches = new List<BatchResponseModel>();
    private Data.Models.Batch batch = new Data.Models.Batch();
    private bool isEditing = false;
    private int batchToDeleteId;

    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private int TotalEntries { get; set; }
    private int TotalPages { get; set; }
    private bool HasPreviousPage => CurrentPage > 1;
    private bool HasNextPage => CurrentPage < TotalPages;

    private int StartEntry => (CurrentPage - 1) * PageSize + 1;
    private int EndEntry => Math.Min(CurrentPage * PageSize, TotalEntries);

    private string Title => isEditing ? "Edit Batch" : "Add Batch";

    protected override async Task OnInitializedAsync()
    {
        await LoadBatches();
    }

    private async Task LoadBatches()
    {
        try
        {
            var token = await AuthService.GetTokenAsync(); // Get the token
            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await HttpClient.GetAsync("Batch/GetAll");
            if (response.IsSuccessStatusCode)
            {
                var allBatches = await response.Content.ReadFromJsonAsync<List<BatchResponseModel>>();
                if (allBatches == null || !allBatches.Any())
                {
                    batches = new List<BatchResponseModel>();
                }
                else
                {
                    batches = allBatches;
                    FilterBatches();
                    TotalEntries = batches.Count; // Set total entries
                    TotalPages = (int)Math.Ceiling(TotalEntries / (double)PageSize); // Calculate the total number of pages
                    paginatedBatches = batches.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList(); // Fetch the data for the current page
                }
                StateHasChanged(); // Force UI to update
            }
            else
            {
                Console.WriteLine($"Error loading data: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private void FilterBatches()
    {
        var filteredBatches = batches
            .Where(b => b.BatchCode.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                        b.BatchTime.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                        b.FacultyName.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                        b.Remarks.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();
        TotalEntries = filteredBatches.Count; // Update the total entries count
        TotalPages = (int)Math.Ceiling(TotalEntries / (double)PageSize); // Update total pages
        paginatedBatches = filteredBatches.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList(); // Update paginated batches
    }

    private void SearchBatches(ChangeEventArgs e)
    {
        SearchQuery = e.Value?.ToString() ?? string.Empty;
        FilterBatches();
    }

    private async Task PreviousPage()
    {
        if (HasPreviousPage)
        {
            CurrentPage--;
            await LoadBatches();
        }
    }

    private async Task NextPage()
    {
        if (HasNextPage)
        {
            CurrentPage++;
            await LoadBatches();
        }
    }

    private async Task GoToPage(int pageNumber)
    {
        if (pageNumber >= 1 && pageNumber <= TotalPages)
        {
            CurrentPage = pageNumber;
            await LoadBatches();
        }
    }

    private void OpenAddBatchModal()
    {
        batch = new Data.Models.Batch();
        isEditing = false;
        ShowModal("addEditBatchModal");
    }

    private async Task OpenEditBatchModal(int batchId)
    {
        isEditing = true;
        var token = await AuthService.GetTokenAsync();
        HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var response = await HttpClient.GetAsync($"Batch/Edit/{batchId}");
        if (response.IsSuccessStatusCode)
        {
            batch = await response.Content.ReadFromJsonAsync<Data.Models.Batch>();
            ShowModal("addEditBatchModal");
        }
        else
        {
            await ShowErrorToast($"Error fetching batch: {response.ReasonPhrase}");
        }
    }

    private void OpenDeleteConfirmationModal(int batchId)
    {
        batchToDeleteId = batchId;
        ShowModal("deleteConfirmationModal");
    }

    private void CloseAddEditBatchModal()
    {
        HideModal("addEditBatchModal");
    }

    private void CloseDeleteConfirmationModal()
    {
        HideModal("deleteConfirmationModal");
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            HttpResponseMessage response;
            if (isEditing)
            {
                response = await HttpClient.PutAsJsonAsync("Batch/Update", batch);
                await ShowSuccessToast("Batch updated successfully.");
            }
            else
            {
                response = await HttpClient.PostAsJsonAsync("api/Batch/Create", batch);
                await ShowSuccessToast("Batch added successfully.");
            }

            if (response.IsSuccessStatusCode)
            {
                await LoadBatches();
            }
            else
            {
                await ShowErrorToast($"Error saving batch: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            await ShowErrorToast($"Error saving batch: {ex.Message}");
        }
        finally
        {
            CloseAddEditBatchModal();
        }
    }

    private async Task ConfirmDeleteBatch()
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await HttpClient.DeleteAsync($"Batch/Delete/{batchToDeleteId}");
            if (response.IsSuccessStatusCode)
            {
                await ShowSuccessToast("Batch deleted successfully.");
                await LoadBatches();
            }
            else
            {
                await ShowErrorToast($"Error deleting batch: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            await ShowErrorToast($"Error deleting batch: {ex.Message}");
        }
        finally
        {
            CloseDeleteConfirmationModal();
        }
    }

    private void ShowModal(string modalId)
    {
        JSRuntime.InvokeVoidAsync("eval", $"$('#{modalId}').modal('show');");
    }

    private void HideModal(string modalId)
    {
        JSRuntime.InvokeVoidAsync("eval", $"$('#{modalId}').modal('hide');");
    }

    private async Task ShowSuccessToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("showSuccess", message);
    }

    private async Task ShowErrorToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("showError", message);
    }

    private async Task ShowInfoToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("showInfo", message);
    }

    private async Task ShowWarningToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("showWarning", message);
    }
}
@* @code {
    private string SearchQuery { get; set; } = string.Empty;
    private List<BatchResponseModel> batches = new List<BatchResponseModel>();
    private List<BatchResponseModel> paginatedBatches = new List<BatchResponseModel>();
    private Data.Models.Batch batch = new Data.Models.Batch();
    private bool isEditing = false;
    private int batchToDeleteId;

    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private int TotalEntries { get; set; }
    private int TotalPages { get; set; }
    private bool HasPreviousPage => CurrentPage > 1;
    private bool HasNextPage => CurrentPage < TotalPages;

    private int StartEntry => (CurrentPage - 1) * PageSize + 1;
    private int EndEntry => Math.Min(CurrentPage * PageSize, TotalEntries);

    private string Title => isEditing ? "Edit Batch" : "Add Batch";

    protected override async Task OnInitializedAsync()
    {
        await LoadBatches();
    }

    private async Task LoadBatches()
    {
        try
        {
            // Fetch all batches from the service
            var allBatches = await BatchService.GetAllBatchesAsync();
            if (allBatches == null || !allBatches.Any())
            {
                batches = new List<BatchResponseModel>();
            }
            else
            {
                batches = allBatches;
                FilterBatches();
                TotalEntries = batches.Count; // Set total entries
                                              // Calculate the total number of pages
                TotalPages = (int)Math.Ceiling(TotalEntries / (double)PageSize);
                // Fetch the data for the current page
                paginatedBatches = batches.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
            }
            StateHasChanged(); // Force UI to update
        }
        catch (Exception ex)
        {
            // Handle any exceptions that occur
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private void FilterBatches()
    {
        // Filter the batches based on the search query
        var filteredBatches = batches
            .Where(b => b.BatchCode.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                        b.BatchTime.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                        b.FacultyName.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                        b.Remarks.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();
        TotalEntries = filteredBatches.Count; // Update the total entries count
        TotalPages = (int)Math.Ceiling(TotalEntries / (double)PageSize); // Update total pages
        paginatedBatches = filteredBatches.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList(); // Update paginated batches
    }
    private void SearchBatches(ChangeEventArgs e)
    {
        SearchQuery = e.Value?.ToString() ?? string.Empty;
        FilterBatches();
    }
    private async Task PreviousPage()
    {
        if (HasPreviousPage)
        {
            CurrentPage--;
            await LoadBatches();
        }
    }

    private async Task NextPage()
    {
        if (HasNextPage)
        {
            CurrentPage++;
            await LoadBatches();
        }
    }

    private async Task GoToPage(int pageNumber)
    {
        if (pageNumber >= 1 && pageNumber <= TotalPages)
        {
            CurrentPage = pageNumber;
            await LoadBatches();
        }
    }

    private void OpenAddBatchModal()
    {
        batch = new Data.Models.Batch();
        isEditing = false;
        ShowModal("addEditBatchModal");
    }

    private async Task OpenEditBatchModal(int batchId)
    {
        isEditing = true;
        batch = await BatchService.GetBatchByIdAsync(batchId);
        ShowModal("addEditBatchModal");
    }

    private void OpenDeleteConfirmationModal(int batchId)
    {
        batchToDeleteId = batchId;
        ShowModal("deleteConfirmationModal");
    }

    private void CloseAddEditBatchModal()
    {
        HideModal("addEditBatchModal");
    }

    private void CloseDeleteConfirmationModal()
    {
        HideModal("deleteConfirmationModal");
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (isEditing)
            {
                await BatchService.UpdateBatchAsync(batch);
                await ShowSuccessToast("Batch updated successfully.");
            }
            else
            {
                await BatchService.CreateBatchAsync(batch);
                await ShowSuccessToast("Batch added successfully.");
            }
            await LoadBatches();
        }
        catch (Exception ex)
        {
            await ShowErrorToast($"Error saving batch: {ex.Message}");
        }
        finally
        {
            CloseAddEditBatchModal();
        }
    }

    private async Task ConfirmDeleteBatch()
    {
        try
        {
            await BatchService.DeleteBatchAsync(batchToDeleteId);
            await ShowSuccessToast("Batch deleted successfully.");
            await LoadBatches();
        }
        catch (Exception ex)
        {
            await ShowErrorToast($"Error deleting batch: {ex.Message}");
        }
        finally
        {
            CloseDeleteConfirmationModal();
        }
    }

    private void ShowModal(string modalId)
    {
        JSRuntime.InvokeVoidAsync("eval", $"$('#{modalId}').modal('show');");
    }

    private void HideModal(string modalId)
    {
        JSRuntime.InvokeVoidAsync("eval", $"$('#{modalId}').modal('hide');");
    }

    private async Task ShowSuccessToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("showSuccess", message);
    }

    private async Task ShowErrorToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("showError", message);
    }

    private async Task ShowInfoToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("showInfo", message);
    }

    private async Task ShowWarningToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("showWarning", message);
    }
}
 *@



