@page "/login"
@layout EmptyLayout

@inject NavigationManager Navigation
@inject HttpClient Http
@inject CustomAuthenticationStateProvider AuthStateProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@using StudentSyncBlazor.Core.Services.Interface
@using StudentSyncBlazor.Data.ViewModels
@using System.Net.Http.Json


<PageTitle>Login</PageTitle>

<div class="authentication-bg">
    <div class="account-pages my-5 pt-sm-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="text-center">
                    <a href="@Navigation.ToAbsoluteUri("/home")" class="mb-5 d-block auth-logo">
                        <h2>Student Sync</h2>
                    </a>
                </div>
            </div>
        </div>
        <div class="container">
            <div class="row align-items-center justify-content-center">
                <div class="col-md-8 col-lg-6 col-xl-4">
                    <div class="card">
                        <div class="card-body p-4">
                            <div class="text-center mt-2">
                                <h5 class="text-primary">Welcome Back!</h5>
                                <p class="text-muted">Sign in to continue to StudentSync.</p>
                            </div>
                            <div class="p-2 mt-4">
                                <EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit">
                                    <DataAnnotationsValidator />

                                    <div class="mb-3">
                                        <label class="form-label" for="email">Email</label>
                                        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" placeholder="Enter email" />
                                        <ValidationMessage For="@(() => loginModel.Email)" />
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label" for="username">Username</label>
                                        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" placeholder="Enter Username" />
                                        <ValidationMessage For="@(() => loginModel.Username)" />
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label" for="password">Password</label>
                                        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Enter password" />
                                        <ValidationMessage For="@(() => loginModel.Password)" />
                                    </div>

                                    <div class="mt-3 text-end">
                                        <button class="btn btn-primary w-sm waves-effect waves-light" type="submit">Log In</button>
                                    </div>

                                    <div class="mt-4 text-center">
                                        <p class="text-muted mb-0">Don't have an account? <a href="@Navigation.ToAbsoluteUri("/register")" class="fw-medium text-primary"> Register</a></p>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                <div class="mt-5 text-center">
                        <p>© @DateTime.Now.Year Student Sync</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginViewModel loginModel = new LoginViewModel();
    private bool loginSuccess = false;
    private string errorMessage;

  
    
    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("token/token", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<TokenResponse>(); 
                if (result != null && !string.IsNullOrEmpty(result.Token))
                {
                    await AuthStateProvider.MarkUserAsAuthenticated(result.Token);
                    loginSuccess = true;
                    Navigation.NavigateTo("/");
                }
                else
                {
                    errorMessage = "Login failed. Please try again.";
                }
            }
            else
            {
                errorMessage = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private class TokenResponse
    {
        public string? Token { get; set; }
        public DateTime Expiration { get; set; }
    }

}
