@page "/master/studentinstallment/index"
@using StudentSyncBlazor.Data.Models
@using StudentSyncBlazor.Core.Services.Interfaces
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using StudentSyncBlazor.Data.ResponseModel
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient

<Breadcrumb Title="Student Installments" BreadcrumbPageTitle="Students"></Breadcrumb>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <!-- Search Box and Add Button -->
                <div class="mb-3 d-flex justify-content-between align-items-center">
                    <button type="button" class="btn btn-primary mb-3" @onclick="OpenAddStudentInstallmentModal">+</button>
                    <input type="text" class="form-control mb-3" style="width: 13%;" @bind="SearchQuery" @oninput="SearchInstallments" placeholder="Search..." />
                </div>                <table id="StudentInstallmentTable" class="table table-bordered dt-responsive nowrap" style="width: 100%;">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Receipt No</th>
                            <th>Receipt Date</th>
                            <th>Amount</th>
                            <th>Enrollment No</th>
                            <th>Transaction Mode</th>
                            <th>Remarks</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody> 
                        @foreach (var installment in paginatedInstallments)
                        {
                            <tr>
                                <td>@installment.Id</td>
                                <td>@installment.ReceiptNo</td>
                                <td>@installment.ReceiptDate?.ToString("yyyy-MM-dd")</td>
                                <td>@installment.Amount</td>
                                <td>@installment.EnrollmentNo</td>
                                <td>@installment.TransactionMode</td>
                                <td>@installment.Remarks</td>
                                <td>
                                    <button class="btn btn-warning btn-sm" @onclick="() => OpenEditStudentInstallmentModal(installment.Id)">Edit</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => OpenDeleteConfirmationModal(installment.Id)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <!-- Pagination Controls -->
                <div class="pagination-container d-flex justify-content-between align-items-center mb-3">
                    <!-- Pagination Message -->
                    <div class="pagination-message">
                        Showing @StartEntry to @EndEntry of @TotalEntries entries
                    </div>

                    <div class="pagination-controls d-flex align-items-center">
                        <button class="btn btn-secondary me-2" @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
                        <button class="btn btn-primary me-2" disabled>@CurrentPage</button>
                        <button class="btn btn-secondary me-2" @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit StudentInstallment Modal -->
<div class="modal fade" id="addEditStudentInstallmentModal" tabindex="-1" aria-labelledby="addEditStudentInstallmentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addEditStudentInstallmentModalLabel">@Title</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAddEditStudentInstallmentModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="installment" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="ReceiptNo">Receipt No</label>
                        <InputText id="ReceiptNo" class="form-control" @bind-Value="installment.ReceiptNo" />
                        <ValidationMessage For="@(() => installment.ReceiptNo)" />

                    </div>
                    <div class="form-group">
                        <label for="ReceiptDate">Receipt Date</label>
                        <InputDate id="ReceiptDate" class="form-control" @bind-Value="installment.ReceiptDate" />
                        <ValidationMessage For="@(() => installment.ReceiptDate)" />

                    </div>
                    <div class="form-group">
                        <label for="Amount">Amount</label>
                        <InputNumber id="Amount" class="form-control" @bind-Value="installment.Amount" />
                        <ValidationMessage For="@(() => installment.Amount)" />

                    </div>
                    <div class="form-group">
                        <label for="EnrollmentNo">Enrollment No</label>
                        <InputText id="EnrollmentNo" class="form-control" @bind-Value="installment.EnrollmentNo" />
                        <ValidationMessage For="@(() => installment.EnrollmentNo)" />

                    </div>
                    <div class="form-group">
                        <label for="TransactionMode">Transaction Mode</label>
                        <InputText id="TransactionMode" class="form-control" @bind-Value="installment.TransactionMode" />
                        <ValidationMessage For="@(() => installment.TransactionMode)" />

                    </div>
                    <div class="form-group">
                        <label for="Remarks">Remarks</label>
                        <InputTextArea id="Remarks" class="form-control" @bind-Value="installment.Remarks" />
                        <ValidationMessage For="@(() => installment.Remarks)" />

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseAddEditStudentInstallmentModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Delete Confirmation</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDeleteConfirmationModal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this student installment?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmationModal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteStudentInstallment">Delete</button>
            </div>
        </div>
    </div>
</div>
@code {
    private List<StudentInstallmentResponseModel> installments = new List<StudentInstallmentResponseModel>();
    private List<StudentInstallmentResponseModel> paginatedInstallments = new List<StudentInstallmentResponseModel>();
    private StudentInstallment installment = new StudentInstallment();
    private bool isEditing = false;
    private int installmentToDeleteId;
    private string SearchQuery { get; set; } = string.Empty;
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private int TotalPages { get; set; }
    private bool HasPreviousPage => CurrentPage > 1;
    private bool HasNextPage => CurrentPage < TotalPages;
    private int StartEntry => (CurrentPage - 1) * PageSize + 1;
    private int EndEntry => Math.Min(CurrentPage * PageSize, TotalEntries);
    private int TotalEntries { get; set; }

    private string Title => isEditing ? "Edit Student Installment" : "Add Student Installment";

    protected override async Task OnInitializedAsync()
    {
        await LoadStudentInstallments();
    }

    private async Task LoadStudentInstallments()
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await HttpClient.GetAsync("StudentInstallment/GetAll");
            if (response.IsSuccessStatusCode)
            {
                installments = await response.Content.ReadFromJsonAsync<List<StudentInstallmentResponseModel>>();
                TotalEntries = installments.Count;
                TotalPages = (int)Math.Ceiling(TotalEntries / (double)PageSize);
                FilterInstallments(); // Refresh paginated data
            }
            else
            {
                await ShowErrorToast($"Error loading data: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            await ShowErrorToast($"Error loading data: {ex.Message}");
        }
    }

    private void FilterInstallments()
    {
        var filteredInstallments = string.IsNullOrEmpty(SearchQuery)
            ? installments
            : installments.Where(i => i.EnrollmentNo.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)).ToList();

        TotalEntries = filteredInstallments.Count;
        TotalPages = (int)Math.Ceiling(TotalEntries / (double)PageSize);
        paginatedInstallments = filteredInstallments
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
    }

    private void SearchInstallments(ChangeEventArgs e)
    {
        SearchQuery = e.Value.ToString();
        CurrentPage = 1;
        FilterInstallments();
    }

    private async Task PreviousPage()
    {
        if (HasPreviousPage)
        {
            CurrentPage--;
            await LoadStudentInstallments();
        }
    }

    private async Task NextPage()
    {
        if (HasNextPage)
        {
            CurrentPage++;
            await LoadStudentInstallments();
        }
    }

    private async Task GoToPage(int pageNumber)
    {
        if (pageNumber >= 1 && pageNumber <= TotalPages)
        {
            CurrentPage = pageNumber;
            await LoadStudentInstallments();
        }
    }

    private void OpenAddStudentInstallmentModal()
    {
        installment = new StudentInstallment();
        isEditing = false;
        ShowModal("addEditStudentInstallmentModal");
    }

    private async Task OpenEditStudentInstallmentModal(int installmentId)
    {
        isEditing = true;
        var token = await AuthService.GetTokenAsync();
        HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var response = await HttpClient.GetAsync($"StudentInstallment/Edit/{installmentId}");
        if (response.IsSuccessStatusCode)
        {
            installment = await response.Content.ReadFromJsonAsync<StudentInstallment>();
            ShowModal("addEditStudentInstallmentModal");
        }
        else
        {
            await ShowErrorToast($"Error fetching installment: {response.ReasonPhrase}");
        }
    }

    private void OpenDeleteConfirmationModal(int installmentId)
    {
        installmentToDeleteId = installmentId;
        ShowModal("deleteConfirmationModal");
    }

    private async Task CloseAddEditStudentInstallmentModal()
    {
        await HideModal("addEditStudentInstallmentModal");
    }

    private async Task CloseDeleteConfirmationModal()
    {
        await HideModal("deleteConfirmationModal");
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            HttpResponseMessage response;
            if (isEditing)
            {
                response = await HttpClient.PutAsJsonAsync("StudentInstallment/Update", installment);
                await ShowSuccessToast("Installment updated successfully.");
            }
            else
            {
                response = await HttpClient.PostAsJsonAsync("StudentInstallment/Create", installment);
                await ShowSuccessToast("Installment added successfully.");
            }

            if (response.IsSuccessStatusCode)
            {
                await LoadStudentInstallments();
            }
            else
            {
                await ShowErrorToast($"Error saving installment: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            await ShowErrorToast($"Error saving installment: {ex.Message}");
        }
        finally
        {
            await CloseAddEditStudentInstallmentModal();
        }
    }

    private async Task ConfirmDeleteStudentInstallment()
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await HttpClient.DeleteAsync($"StudentInstallment/Delete/{installmentToDeleteId}");
            if (response.IsSuccessStatusCode)
            {
                await ShowSuccessToast("Installment deleted successfully.");
                await LoadStudentInstallments();
            }
            else
            {
                await ShowErrorToast($"Error deleting installment: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            await ShowErrorToast($"Error deleting installment: {ex.Message}");
        }
        finally
        {
            await CloseDeleteConfirmationModal();
        }
    }

    private async Task ShowModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("eval", $"$('#{modalId}').modal('show');");
    }

    private async Task HideModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("eval", $"$('#{modalId}').modal('hide');");
    }

    private async Task ShowSuccessToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("toastr.success", message);
    }

    private async Task ShowErrorToast(string message)
    {
        await JSRuntime.InvokeVoidAsync("toastr.error", message);
    }
}
