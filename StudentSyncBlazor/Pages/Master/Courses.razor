@* @page "/master/course/index"
@using StudentSyncBlazor.Data.Models
@using StudentSyncBlazor.Core.Services.Interface
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@inject ICourseServices CourseServices
@inject IJSRuntime JSRuntime

<h3>Course Management</h3>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <button type="button" class="btn btn-primary mb-3" @onclick="OpenAddCourseModal">+</button>
                <table id="CourseTable" class="table table-bordered dt-responsive nowrap" style="width: 100%;">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Course Name</th>
                            <th>Duration</th>
                            <th>PreRequisite</th>
                            <th>Remarks</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var course in courses)
                        {
                            <tr>
                                <td>@course.CourseId</td>
                                <td>@course.CourseName</td>
                                <td>@course.Duration</td>
                                <td>@course.PreRequisite</td>
                                <td>@course.Remarks</td>
                                <td>
                                    <button class="btn btn-warning" @onclick="() => OpenEditCourseModal(course.CourseId)">Edit</button>
                                    <button class="btn btn-danger" @onclick="() => OpenDeleteConfirmationModal(course.CourseId)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Course Modal -->
<div class="modal fade" id="addEditCourseModal" tabindex="-1" aria-labelledby="addEditCourseModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addEditCourseModalLabel">@Title</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAddEditCourseModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="course" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label for="CourseName">Course Name</label>
                        <InputText id="CourseName" class="form-control" @bind-Value="course.CourseName" />
                        <ValidationMessage For="@(() => course.CourseName)" />
                    </div>
                    <div class="form-group">
                        <label for="Duration">Duration</label>
                        <InputText id="Duration" class="form-control" @bind-Value="course.Duration" />
                        <ValidationMessage For="@(() => course.Duration)" />
                    </div>
                    <div class="form-group">
                        <label for="PreRequisite">PreRequisite</label>
                        <InputText id="PreRequisite" class="form-control" @bind-Value="course.PreRequisite" />
                    </div>
                    <div class="form-group">
                        <label for="Remarks">Remarks</label>
                        <InputTextArea id="Remarks" class="form-control" @bind-Value="course.Remarks" />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseAddEditCourseModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Delete Confirmation</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDeleteConfirmationModal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this course?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmationModal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteCourse">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Course> courses = new List<Course>();
    private Course course = new Course();
    private bool isEditing = false;
    private int courseToDeleteId;

    private string Title => isEditing ? "Edit Course" : "Add Course";

    protected override async Task OnInitializedAsync()
    {
        await LoadCourses();
    }

    private async Task LoadCourses()
    {
        courses = await CourseServices.GetAllCourseAsync();
        StateHasChanged();
    }

    private void OpenAddCourseModal()
    {
        course = new Course { CreatedBy = "Admin", CreatedDate = DateTime.Now }; // Set CreatedBy and CreatedDate here
        isEditing = false;
        ShowModal("addEditCourseModal");
    }

    private async Task OpenEditCourseModal(int courseId)
    {
        isEditing = true;
        course = await CourseServices.GetCoursesByIdAsync(courseId);
        ShowModal("addEditCourseModal");
    }

    private void CloseAddEditCourseModal()
    {
        HideModal("addEditCourseModal");
    }

    private async Task HandleValidSubmit()
    {
        if (isEditing)
        {
            course.UpdatedBy = "Admin"; // Set UpdatedBy here
            course.UpdatedDate = DateTime.Now;
            await CourseServices.UpdateCourseAsync(course);
            await JSRuntime.InvokeVoidAsync("toastr.success", "Course updated successfully");
        }
        else
        {
            course.UpdatedBy = null;
            course.UpdatedDate = null;
            await CourseServices.AddCourseAsync(course);
            await JSRuntime.InvokeVoidAsync("toastr.success", "Course added successfully");
        }
        CloseAddEditCourseModal();
        await LoadCourses();
    }

    private void OpenDeleteConfirmationModal(int courseId)
    {
        courseToDeleteId = courseId;
        ShowModal("deleteConfirmationModal");
    }

    private void CloseDeleteConfirmationModal()
    {
        HideModal("deleteConfirmationModal");
    }

    private async Task ConfirmDeleteCourse()
    {
        await CourseServices.DeleteCourseAsync(courseToDeleteId);
        CloseDeleteConfirmationModal();
        await JSRuntime.InvokeVoidAsync("toastr.success", "Course deleted successfully");
        await LoadCourses();
    }

    private void ShowModal(string modalId)
    {
        JSRuntime.InvokeVoidAsync("showModal", modalId);
    }

    private void HideModal(string modalId)
    {
        JSRuntime.InvokeVoidAsync("hideModal", modalId);
    }
}
 *@









    @page "/master/course/index"
@using StudentSyncBlazor.Data.Models
@using StudentSyncBlazor.Core.Services.Interface
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@inject ICourseServices CourseServices
@inject IJSRuntime JSRuntime

<Breadcrumb Title="Course" BreadcrumbPageTitle="Courses"></Breadcrumb>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <!-- Search Box and Add Button -->
                <div class="mb-3 d-flex justify-content-between align-items-center">
                    <button type="button" class="btn btn-primary ms-3" @onclick="OpenAddCourseModal">+</button>
                    <input type="text" class="form-control" style="width: 13%;" placeholder="Search..." @bind="SearchQuery" @oninput="SearchCourses" />
                </div>
                <table id="CourseTable" class="table table-bordered dt-responsive nowrap" style="width: 100%;">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Course Name</th>
                            <th>Duration</th>
                            <th>PreRequisite</th>
                            <th>Remarks</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var course in paginatedCourses)
                        {
                            <tr>
                                <td>@course.CourseId</td>
                                <td>@course.CourseName</td>
                                <td>@course.Duration</td>
                                <td>@course.PreRequisite</td>
                                <td>@course.Remarks</td>
                                <td>
                                    <button class="btn btn-warning btn-sm" @onclick="() => OpenEditCourseModal(course.CourseId)">Edit</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => OpenDeleteConfirmationModal(course.CourseId)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <!-- Pagination Controls -->
                <div class="pagination-container d-flex justify-content-between align-items-center mb-3">
                    <!-- Pagination Message -->
                    <div class="pagination-message">
                        Showing @StartEntry to @EndEntry of @TotalEntries entries
                    </div>

                    <div class="pagination-controls d-flex align-items-center">
                        <button class="btn btn-secondary me-2" @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
                        <button class="btn btn-primary me-2" disabled>@CurrentPage</button>
                        <button class="btn btn-secondary me-2" @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
                    </div>
                </div>

              
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Course Modal -->
<div class="modal fade" id="addEditCourseModal" tabindex="-1" aria-labelledby="addEditCourseModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addEditCourseModalLabel">@Title</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAddEditCourseModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="course" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="CourseName">Course Name</label>
                        <InputText id="CourseName" class="form-control" @bind-Value="course.CourseName" />
                        <ValidationMessage For="@(() => course.CourseName)" />
                    </div>
                    <div class="form-group">
                        <label for="Duration">Duration</label>
                        <InputText id="Duration" class="form-control" @bind-Value="course.Duration" />
                        <ValidationMessage For="@(() => course.Duration)" />
                    </div>
                    <div class="form-group">
                        <label for="PreRequisite">PreRequisite</label>
                        <InputText id="PreRequisite" class="form-control" @bind-Value="course.PreRequisite" />
                        <ValidationMessage For="@(() => course.PreRequisite)" />

                    </div>
                    <div class="form-group">
                        <label for="Remarks">Remarks</label>
                        <InputTextArea id="Remarks" class="form-control" @bind-Value="course.Remarks" />
                        <ValidationMessage For="@(() => course.Remarks)" />

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseAddEditCourseModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Delete Confirmation</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDeleteConfirmationModal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this course?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmationModal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteCourse">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string SearchQuery { get; set; } = string.Empty;

    private List<Course> courses = new List<Course>();
    private List<Course> paginatedCourses = new List<Course>();
    private Course course = new Course();
    private bool isEditing = false;
    private int courseToDeleteId;

    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private int TotalPages { get; set; }
    private bool HasPreviousPage => CurrentPage > 1;
    private bool HasNextPage => CurrentPage < TotalPages;
    private int TotalEntries { get; set; }


    private int StartEntry => (CurrentPage - 1) * PageSize + 1;
    private int EndEntry => Math.Min(CurrentPage * PageSize, TotalEntries);

    private string Title => isEditing ? "Edit Course" : "Add Course";

    protected override async Task OnInitializedAsync()
    {
        await LoadCourses();
    }

    private async Task LoadCourses()
    {
        try
        {
            var allCourses = await CourseServices.GetAllCourseAsync();
            if (allCourses == null || !allCourses.Any())
            {
                Console.WriteLine("No data returned from service.");
                courses = new List<Course>();
            }
            else
            {
                Console.WriteLine($"Data loaded: {allCourses.Count} items.");
                courses = allCourses;
                FilterCourses();
                TotalEntries = courses.Count;
                TotalPages = (int)Math.Ceiling(courses.Count / (double)PageSize);
                paginatedCourses = courses.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
            }
            StateHasChanged(); // Force UI to update
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }
    private void FilterCourses()
    {
        var filteredCourses = string.IsNullOrEmpty(SearchQuery)
            ? courses
            : courses.Where(c => c.CourseName.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)).ToList();

        TotalEntries = filteredCourses.Count;
        TotalPages = (int)Math.Ceiling(TotalEntries / (double)PageSize);
        paginatedCourses = filteredCourses.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
    }
    private async Task SearchCourses(ChangeEventArgs e)
    {
        SearchQuery = e.Value?.ToString() ?? string.Empty;
        FilterCourses();
    }

    private async Task PreviousPage()
    {
        if (HasPreviousPage)
        {
            CurrentPage--;
            await LoadCourses();
        }
    }

    private async Task NextPage()
    {
        if (HasNextPage)
        {
            CurrentPage++;
            await LoadCourses();
        }
    }

    private void OpenAddCourseModal()
    {
        course = new Course { CreatedBy = "Admin", CreatedDate = DateTime.Now }; // Set CreatedBy and CreatedDate here
        isEditing = false;
        ShowModal("addEditCourseModal");
    }

    private async Task OpenEditCourseModal(int courseId)
    {
        isEditing = true;
        course = await CourseServices.GetCoursesByIdAsync(courseId);
        ShowModal("addEditCourseModal");
    }

    private void CloseAddEditCourseModal()
    {
        HideModal("addEditCourseModal");
    }

    private async Task HandleValidSubmit()
    {
        if (isEditing)
        {
            course.UpdatedBy = "Admin"; // Set UpdatedBy here
            course.UpdatedDate = DateTime.Now;
            await CourseServices.UpdateCourseAsync(course);
            await JSRuntime.InvokeVoidAsync("toastr.success", "Course updated successfully");
        }
        else
        {
            course.UpdatedBy = null;
            course.UpdatedDate = null;
            await CourseServices.AddCourseAsync(course);
            await JSRuntime.InvokeVoidAsync("toastr.success", "Course added successfully");
        }
        CloseAddEditCourseModal();
        await LoadCourses();
    }

    private void OpenDeleteConfirmationModal(int courseId)
    {
        courseToDeleteId = courseId;
        ShowModal("deleteConfirmationModal");
    }

    private void CloseDeleteConfirmationModal()
    {
        HideModal("deleteConfirmationModal");
    }

    private async Task ConfirmDeleteCourse()
    {
        await CourseServices.DeleteCourseAsync(courseToDeleteId);
        CloseDeleteConfirmationModal();
        await JSRuntime.InvokeVoidAsync("toastr.success", "Course deleted successfully");
        await LoadCourses();
    }

    private void ShowModal(string modalId)
    {
        JSRuntime.InvokeVoidAsync("showModal", modalId);
    }

    private void HideModal(string modalId)
    {
        JSRuntime.InvokeVoidAsync("hideModal", modalId);
    }
}
