@page "/master/studentattendance/index"
@using StudentSyncBlazor.Data.Models
@using StudentSyncBlazor.Core.Services.Interface
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using StudentSyncBlazor.Data.ResponseModel
@inject IJSRuntime JSRuntime
@inject IStudentAttendanceService StudentAttendanceService

<Breadcrumb Title="Student Attendance" BreadcrumbPageTitle="Students"></Breadcrumb>


<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="mb-3 d-flex justify-content-between align-items-center">
                    <button type="button" class="btn btn-primary mb-3" @onclick="OpenAddStudentAttendanceModal">+</button>
                    <input type="text" class="form-control mb-3" style="width: 13%;" @bind="SearchQuery" @oninput="SearchAttendances" placeholder="Search..." />
                </div>
                <table id="StudentAttendanceTable" class="table table-bordered dt-responsive nowrap" style="width: 100%;">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Attendance Date</th>
                            <th>Enrollment No</th>
                            <th>Batch ID</th>
                            <th>Remarks</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var attendance in paginatedAttendances)
                        {
                            <tr>
                                <td>@attendance.Id</td>
                                <td>@attendance.AttendanceDate?.ToString("yyyy-MM-dd")</td>
                                <td>@attendance.EnrollmentNo</td>
                                <td>@attendance.BatchId</td>
                                <td>@attendance.Remarks</td>
                                <td>
                                    <button class="btn btn-warning btn-sm" @onclick="() => OpenEditStudentAttendanceModal(attendance.Id)">Edit</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => OpenDeleteConfirmationModal(attendance.Id)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="pagination-container d-flex justify-content-between align-items-center mb-3">
                    <div class="pagination-message">
                        Showing @StartEntry to @EndEntry of @TotalEntries entries
                    </div>
                    <div class="pagination-controls d-flex align-items-center">
                        <button class="btn btn-secondary me-2" @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
                        <button class="btn btn-primary me-2" disabled>@CurrentPage</button>
                        <button class="btn btn-secondary me-2" @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Student Attendance Modal -->
<div class="modal fade" id="addEditStudentAttendanceModal" tabindex="-1" aria-labelledby="addEditStudentAttendanceModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addEditStudentAttendanceModalLabel">@Title</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAddEditStudentAttendanceModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="studentAttendance" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="AttendanceDate">Attendance Date</label>
                        <InputDate id="AttendanceDate" class="form-control" @bind-Value="studentAttendance.AttendanceDate" />
                        <ValidationMessage For="@(() => studentAttendance.AttendanceDate)" />

                    </div>
                    <div class="form-group">
                        <label for="EnrollmentNo">Enrollment No</label>
                        <InputText id="EnrollmentNo" class="form-control" @bind-Value="studentAttendance.EnrollmentNo" />
                        <ValidationMessage For="@(() => studentAttendance.EnrollmentNo)" />

                    </div>
                    <div class="form-group">
                        <label for="BatchId">Batch ID</label>
                        <InputNumber id="BatchId" class="form-control" @bind-Value="studentAttendance.BatchId" />
                        <ValidationMessage For="@(() => studentAttendance.BatchId)" />

                    </div>
                    <div class="form-group">
                        <label for="Remarks">Remarks</label>
                        <InputTextArea id="Remarks" class="form-control" @bind-Value="studentAttendance.Remarks" />
                        <ValidationMessage For="@(() => studentAttendance.Remarks)" />

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseAddEditStudentAttendanceModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Delete Confirmation</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDeleteConfirmationModal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this student attendance record?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmationModal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteStudentAttendance">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<StudentAttendanceResponseModel> attendances = new List<StudentAttendanceResponseModel>();
    private List<StudentAttendanceResponseModel> paginatedAttendances = new List<StudentAttendanceResponseModel>();
    private StudentAttendance studentAttendance = new StudentAttendance();
    private bool isEditing = false;
    private int studentAttendanceToDeleteId;
    private string SearchQuery { get; set; } = string.Empty;
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private int TotalPages { get; set; }
    private bool HasPreviousPage => CurrentPage > 1;
    private bool HasNextPage => CurrentPage < TotalPages;

    private int StartEntry => (CurrentPage - 1) * PageSize + 1;
    private int EndEntry => Math.Min(CurrentPage * PageSize, TotalEntries);
    private int TotalEntries { get; set; }

    private string Title => isEditing ? "Edit Student Attendance" : "Add Student Attendance";

    protected override async Task OnInitializedAsync()
    {
        await LoadStudentAttendances();
    }

    private async Task LoadStudentAttendances()
    {
        try
        {
            attendances = (await StudentAttendanceService.GetAllStudentAttendances()).ToList();
            TotalEntries = attendances.Count;
            TotalPages = (int)Math.Ceiling(TotalEntries / (double)PageSize);
            FilterAttendances();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private void FilterAttendances()
    {
        var filteredAttendances = string.IsNullOrEmpty(SearchQuery)
            ? attendances
            : attendances.Where(a => a.EnrollmentNo.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)).ToList();

        TotalEntries = filteredAttendances.Count;
        TotalPages = (int)Math.Ceiling(TotalEntries / (double)PageSize);
        paginatedAttendances = filteredAttendances.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
    }

    private void SearchAttendances(ChangeEventArgs e)
    {
        SearchQuery = e.Value.ToString();
        FilterAttendances();
    }

    private void OpenAddStudentAttendanceModal()
    {
        studentAttendance = new StudentAttendance(); // Reset the form
        isEditing = false;
        ShowModal("addEditStudentAttendanceModal");
    }

    private async Task OpenEditStudentAttendanceModal(int studentAttendanceId)
    {
        isEditing = true;
        studentAttendance = await StudentAttendanceService.GetStudentAttendanceById(studentAttendanceId);
        ShowModal("addEditStudentAttendanceModal");
    }

    private async Task OpenDeleteConfirmationModal(int studentAttendanceId)
    {
        studentAttendanceToDeleteId = studentAttendanceId;
        ShowModal("deleteConfirmationModal");
    }

    private async Task CloseAddEditStudentAttendanceModal()
    {
        await HideModal("addEditStudentAttendanceModal");
    }

    private async Task CloseDeleteConfirmationModal()
    {
        await HideModal("deleteConfirmationModal");
    }

    private async Task ConfirmDeleteStudentAttendance()
    {
        await StudentAttendanceService.DeleteStudentAttendance(studentAttendanceToDeleteId);
        await JSRuntime.InvokeVoidAsync("toastr.success", "Attendance deleted successfully.");
        await LoadStudentAttendances();
        await CloseDeleteConfirmationModal();
    }

    private async Task HandleValidSubmit()
    {
        if (isEditing)
        {
            await StudentAttendanceService.UpdateStudentAttendance(studentAttendance);
            await JSRuntime.InvokeVoidAsync("toastr.success", "Attendance updated successfully.");

        }
        else
        {
            await StudentAttendanceService.AddStudentAttendance(studentAttendance);
            await JSRuntime.InvokeVoidAsync("toastr.success", "Attendance added successfully.");

        }
        await LoadStudentAttendances();
        await CloseAddEditStudentAttendanceModal();
    }

    private async Task ShowModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("showModal", modalId);
    }

    private async Task HideModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("hideModal", modalId);
    }

    private void PreviousPage()
    {
        if (HasPreviousPage)
        {
            CurrentPage--;
            FilterAttendances();
        }
    }

    private void NextPage()
    {
        if (HasNextPage)
        {
            CurrentPage++;
            FilterAttendances();
        }
    }
}
